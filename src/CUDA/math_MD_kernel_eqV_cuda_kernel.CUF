!
! auto-generated by ops_fortran.py
!
MODULE MATH_MD_KERNEL_EQV_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opGblDat7Device_math_MD_kernel_eqV
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opGblDat8Device_math_MD_kernel_eqV
INTEGER(KIND=4), constant :: xdim1_math_MD_kernel_eqV
INTEGER(KIND=4):: xdim1_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: ydim1_math_MD_kernel_eqV
INTEGER(KIND=4):: ydim1_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: zdim1_math_MD_kernel_eqV
INTEGER(KIND=4):: zdim1_math_MD_kernel_eqV_h  = -1
#define OPS_ACC1(x,y,z) (x+xdim1_math_MD_kernel_eqV*(y)+xdim1_math_MD_kernel_eqV*ydim1_math_MD_kernel_eqV*(z)+1)
INTEGER(KIND=4), constant :: xdim2_math_MD_kernel_eqV
INTEGER(KIND=4):: xdim2_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: ydim2_math_MD_kernel_eqV
INTEGER(KIND=4):: ydim2_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: zdim2_math_MD_kernel_eqV
INTEGER(KIND=4):: zdim2_math_MD_kernel_eqV_h  = -1
#define OPS_ACC2(x,y,z) (x+xdim2_math_MD_kernel_eqV*(y)+xdim2_math_MD_kernel_eqV*ydim2_math_MD_kernel_eqV*(z)+1)
INTEGER(KIND=4), constant :: xdim3_math_MD_kernel_eqV
INTEGER(KIND=4):: xdim3_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: ydim3_math_MD_kernel_eqV
INTEGER(KIND=4):: ydim3_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: zdim3_math_MD_kernel_eqV
INTEGER(KIND=4):: zdim3_math_MD_kernel_eqV_h  = -1
#define OPS_ACC3(x,y,z) (x+xdim3_math_MD_kernel_eqV*(y)+xdim3_math_MD_kernel_eqV*ydim3_math_MD_kernel_eqV*(z)+1)
INTEGER(KIND=4), constant :: xdim4_math_MD_kernel_eqV
INTEGER(KIND=4):: xdim4_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: ydim4_math_MD_kernel_eqV
INTEGER(KIND=4):: ydim4_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: zdim4_math_MD_kernel_eqV
INTEGER(KIND=4):: zdim4_math_MD_kernel_eqV_h  = -1
#define OPS_ACC4(x,y,z) (x+xdim4_math_MD_kernel_eqV*(y)+xdim4_math_MD_kernel_eqV*ydim4_math_MD_kernel_eqV*(z)+1)
INTEGER(KIND=4), constant :: xdim6_math_MD_kernel_eqV
INTEGER(KIND=4):: xdim6_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: ydim6_math_MD_kernel_eqV
INTEGER(KIND=4):: ydim6_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: zdim6_math_MD_kernel_eqV
INTEGER(KIND=4):: zdim6_math_MD_kernel_eqV_h  = -1
#define OPS_ACC6(x,y,z) (x+xdim6_math_MD_kernel_eqV*(y)+xdim6_math_MD_kernel_eqV*ydim6_math_MD_kernel_eqV*(z)+1)

INTEGER(KIND=4), constant :: xdim5_math_MD_kernel_eqV
INTEGER(KIND=4):: xdim5_math_MD_kernel_eqV_h  = -1
INTEGER(KIND=4), constant :: ydim5_math_MD_kernel_eqV
INTEGER(KIND=4):: ydim5_math_MD_kernel_eqV_h  = -1
#define OPS_ACC_MD5(d,x,y,z) ((x)*2+(d)+(xdim5_math_MD_kernel_eqV*(y)*2)+(xdim5_math_MD_kernel_eqV*ydim5_math_MD_kernel_eqV*(z)*2))

contains

!user function
attributes (device) SUBROUTINE math_md_kernel_eqv_gpu(transp,store7,wmomix,trun,yrhs,drhs,condco,ovwmol,tdifgb,ncocon,ncocm1)
    use data_types
    implicit none

    real(kind=8), dimension(1) :: transp,store7,wmomix
    real(kind=8), dimension(1), intent(in) :: trun,yrhs,drhs

    integer, intent(in) :: ncocon,ncocm1

    real(kind=8), dimension(nspcmx_OPSCONSTANT), intent(in) :: ovwmol
    real(kind=8), dimension(nccfmx_OPSCONSTANT,nspcmx_OPSCONSTANT), intent(in) :: condco

    real(kind=8), intent(in) :: tdifgb

    real(kind=8) :: fornow, combo1, combo2, combo3
    real(kind=8), dimension(nspcmx_OPSCONSTANT) :: ctrans
    integer :: ispec,icp

    transp(OPS_ACC1(0,0,0)) = LOG(trun(OPS_ACC4(0,0,0))/tdifgb)
    DO ispec = 1, nspcmx_OPSCONSTANT
        fornow = condco(ncocon,ispec)
        DO icp = ncocm1,1,-1
            fornow = fornow*transp(OPS_ACC1(0,0,0)) + condco(icp,ispec)
        END DO
        ctrans(ispec) = EXP(fornow)
    END DO

    combo1 = 0.0_8
    combo2 = 0.0_8
    combo3 = 0.0_8
    DO ispec = 1, nspcmx_OPSCONSTANT
        fornow = yrhs(OPS_ACC_MD5(ispec,0,0,0))*ovwmol(ispec)
        combo1 = combo1 + fornow*ctrans(ispec)
        combo2 = combo2 + fornow/ctrans(ispec)
        combo3 = combo3 + fornow
    END DO

    combo3 = 1.0_8/combo3
    combo1 = combo1*combo3
    combo2 = combo2*combo3
    store7(OPS_ACC2(0,0,0)) = 0.5_8*(combo1 + 1.0_8/combo2)
    wmomix(OPS_ACC3(0,0,0)) = drhs(OPS_ACC6(0,0,0))*combo3

END SUBROUTINE

#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4
#undef OPS_ACC6

#undef OPS_ACC_MD5


!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine math_MD_kernel_eqV_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsDat3Local, &
& opsDat4Local, &
& opsDat5Local, &
& opsDat6Local, &
& opsGblDat7Device,   &
& opsGblDat8Device,   &
& opsGblDat9Device,   &
& opsGblDat10Device,   &
& opsGblDat11Device,   &
& dat1_base, &
& dat2_base, &
& dat3_base, &
& dat4_base, &
& dat5_base, &
& dat6_base, &
& size1, size2, size3 )
  IMPLICIT NONE
  real(8), DEVICE :: opsDat1Local(*)
  integer(4) arg1
  real(8), DEVICE :: opsDat2Local(*)
  integer(4) arg2
  real(8), DEVICE :: opsDat3Local(*)
  integer(4) arg3
  real(8), DEVICE, INTENT(IN) :: opsDat4Local(*)
  integer(4) arg4
  real(8), DEVICE, INTENT(IN) :: opsDat5Local(*)
  integer(4) arg5
  real(8), DEVICE, INTENT(IN) :: opsDat6Local(*)
  integer(4) arg6
  real(8), DEVICE :: opsGblDat7Device(:)
  real(8), DEVICE :: opsGblDat8Device(:)
  real(8), VALUE :: opsGblDat9Device
  integer, VALUE :: opsGblDat10Device
  integer, VALUE :: opsGblDat11Device
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4), value :: dat3_base
  integer(4), value :: dat4_base
  integer(4), value :: dat5_base
  integer(4), value :: dat6_base
  integer(4) start(3)
  integer(4) end(3)
  integer, value :: size1,size2,size3
  integer n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  arg1 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_math_MD_kernel_eqV + (n_z-1) * 1*1 * xdim1_math_MD_kernel_eqV * ydim1_math_MD_kernel_eqV
  arg2 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_math_MD_kernel_eqV + (n_z-1) * 1*1 * xdim2_math_MD_kernel_eqV * ydim2_math_MD_kernel_eqV
  arg3 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim3_math_MD_kernel_eqV + (n_z-1) * 1*1 * xdim3_math_MD_kernel_eqV * ydim3_math_MD_kernel_eqV
  arg4 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim4_math_MD_kernel_eqV + (n_z-1) * 1*1 * xdim4_math_MD_kernel_eqV * ydim4_math_MD_kernel_eqV
  arg5 = (n_x-1) * 1*2 + (n_y-1) * 1*2 * xdim5_math_MD_kernel_eqV + (n_z-1) * 1*2 * xdim5_math_MD_kernel_eqV * ydim5_math_MD_kernel_eqV
  arg6 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim6_math_MD_kernel_eqV + (n_z-1) * 1*1 * xdim6_math_MD_kernel_eqV * ydim6_math_MD_kernel_eqV
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN
    call math_MD_kernel_eqV_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsDat3Local(dat3_base+arg3), &
    & opsDat4Local(dat4_base+arg4), &
    & opsDat5Local(dat5_base+arg5), &
    & opsDat6Local(dat6_base+arg6), &
    & opsGblDat7Device(1), &
    & opsGblDat8Device(1), &
    & opsGblDat9Device, &
    & opsGblDat10Device, &
    & opsGblDat11Device )

  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine math_MD_kernel_eqV_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5, &
& opsArg6, &
& opsArg7, &
& opsArg8, &
& opsArg9, &
& opsArg10, &
& opsArg11)
  use cudafor
  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( ops_block ), INTENT(IN) :: block
  integer(kind=4), INTENT(IN):: dim
  integer(kind=4)   , DIMENSION(2*dim), INTENT(IN) :: range
  real(kind=8) t1,t2,t3
  real(kind=4) transfer_total, transfer
  integer(kind=4) :: istat

  type ( ops_arg )  , INTENT(IN) :: opsArg1
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat1Local
  integer(kind=4) :: opsDat1Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat1_size
  integer(kind=4) :: dat1_base
  INTEGER(KIND=4) :: xdim1
  INTEGER(KIND=4) :: ydim1, zdim1

  type ( ops_arg )  , INTENT(IN) :: opsArg2
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat2Local
  integer(kind=4) :: opsDat2Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat2_size
  integer(kind=4) :: dat2_base
  INTEGER(KIND=4) :: xdim2
  INTEGER(KIND=4) :: ydim2, zdim2

  type ( ops_arg )  , INTENT(IN) :: opsArg3
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat3Local
  integer(kind=4) :: opsDat3Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat3_size
  integer(kind=4) :: dat3_base
  INTEGER(KIND=4) :: xdim3
  INTEGER(KIND=4) :: ydim3, zdim3

  type ( ops_arg )  , INTENT(IN) :: opsArg4
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat4Local
  integer(kind=4) :: opsDat4Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat4_size
  integer(kind=4) :: dat4_base
  INTEGER(KIND=4) :: xdim4
  INTEGER(KIND=4) :: ydim4, zdim4

  type ( ops_arg )  , INTENT(IN) :: opsArg5
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat5Local
  integer(kind=4) :: opsDat5Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat5_size
  integer(kind=4) :: dat5_base
  INTEGER(KIND=4) :: xdim5
  INTEGER(KIND=4) :: multi_d5
  INTEGER(KIND=4) :: ydim5, zdim5

  type ( ops_arg )  , INTENT(IN) :: opsArg6
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat6Local
  integer(kind=4) :: opsDat6Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat6_size
  integer(kind=4) :: dat6_base
  INTEGER(KIND=4) :: xdim6
  INTEGER(KIND=4) :: ydim6, zdim6

  type ( ops_arg )  , INTENT(IN) :: opsArg7
  integer(kind=4) :: opsDat7Cardinality
  real(8), DIMENSION(:), DEVICE, POINTER :: opsDat7Host
  type ( ops_arg )  , INTENT(IN) :: opsArg8
  integer(kind=4) :: opsDat8Cardinality
  real(8), DIMENSION(:), DEVICE, POINTER :: opsDat8Host
  type ( ops_arg )  , INTENT(IN) :: opsArg9
  integer(kind=4) :: opsDat9Cardinality
  real(8), DIMENSION(:), POINTER :: opsDat9Host
  type ( ops_arg )  , INTENT(IN) :: opsArg10
  integer(kind=4) :: opsDat10Cardinality
  integer, DIMENSION(:), POINTER :: opsDat10Host
  type ( ops_arg )  , INTENT(IN) :: opsArg11
  integer(kind=4) :: opsDat11Cardinality
  integer, DIMENSION(:), POINTER :: opsDat11Host

  integer x_size, y_size, z_size
  integer start(3)
  integer end(3)
  integer(kind=4) :: n
  integer(kind=4) :: i10
  integer(kind=4) :: i20
  integer(kind=4) :: blocksPerGrid
  integer(kind=4) :: nshared
  integer(kind=4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type ( ops_arg ) , DIMENSION(11) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5
  opsArgArray(6) = opsArg6
  opsArgArray(7) = opsArg7
  opsArgArray(8) = opsArg8
  opsArgArray(9) = opsArg9
  opsArgArray(10) = opsArg10
  opsArgArray(11) = opsArg11

  call setKernelTime(211,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start, end, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start(n) = range(2*n-1)
    end(n) = range(2*n)
  END DO
#endif


  x_size = MAX(0,end(1)-start(1)+1)
  y_size = MAX(0,end(2)-start(2)+1)
  z_size = MAX(0,end(3)-start(3)+1)

  call ops_upload_gbls(opsArgArray,11)
  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg3),dat3_size,(/dim/))
  xdim3 = dat3_size(1)
  ydim3 = dat3_size(2)
  zdim3 = dat3_size(3)
  opsDat3Cardinality = opsArg3%dim * xdim3 * ydim3 * zdim3
  dat3_base = getDatBaseFromOpsArg3D(opsArg3,start,1)
  call c_f_pointer(opsArg3%data_d,opsDat3Local,(/opsDat3Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg4),dat4_size,(/dim/))
  xdim4 = dat4_size(1)
  ydim4 = dat4_size(2)
  zdim4 = dat4_size(3)
  opsDat4Cardinality = opsArg4%dim * xdim4 * ydim4 * zdim4
  dat4_base = getDatBaseFromOpsArg3D(opsArg4,start,1)
  call c_f_pointer(opsArg4%data_d,opsDat4Local,(/opsDat4Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg5),dat5_size,(/dim/))
  xdim5 = dat5_size(1)
  ydim5 = dat5_size(2)
  zdim5 = dat5_size(3)
  opsDat5Cardinality = opsArg5%dim * xdim5 * ydim5 * zdim5
  multi_d5 = getDatDimFromOpsArg(opsArg5) ! dimension of the dat
  dat5_base = getDatBaseFromOpsArg3D(opsArg5,start,multi_d5)
  call c_f_pointer(opsArg5%data_d,opsDat5Local,(/opsDat5Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg6),dat6_size,(/dim/))
  xdim6 = dat6_size(1)
  ydim6 = dat6_size(2)
  zdim6 = dat6_size(3)
  opsDat6Cardinality = opsArg6%dim * xdim6 * ydim6 * zdim6
  dat6_base = getDatBaseFromOpsArg3D(opsArg6,start,1)
  call c_f_pointer(opsArg6%data_d,opsDat6Local,(/opsDat6Cardinality/))

  opsDat7Cardinality = opsArg7%dim
  call c_f_pointer(opsArgArray(7)%data_d,opsDat7Host,(/opsDat7Cardinality/))

  opsDat8Cardinality = opsArg8%dim
  call c_f_pointer(opsArgArray(8)%data_d,opsDat8Host,(/opsDat8Cardinality/))

  opsDat9Cardinality = opsArg9%dim
  call c_f_pointer(opsArg9%data,opsDat9Host,(/opsDat9Cardinality/))

  opsDat10Cardinality = opsArg10%dim
  call c_f_pointer(opsArg10%data,opsDat10Host,(/opsDat10Cardinality/))

  opsDat11Cardinality = opsArg11%dim
  call c_f_pointer(opsArg11%data,opsDat11Host,(/opsDat11Cardinality/))

  IF ((xdim1 .NE. xdim1_math_MD_kernel_eqV_h) .OR. &
  (ydim1 .NE. ydim1_math_MD_kernel_eqV_h) .OR. &
  (xdim2 .NE. xdim2_math_MD_kernel_eqV_h) .OR. &
  (ydim2 .NE. ydim2_math_MD_kernel_eqV_h) .OR. &
  (xdim3 .NE. xdim3_math_MD_kernel_eqV_h) .OR. &
  (ydim3 .NE. ydim3_math_MD_kernel_eqV_h) .OR. &
  (xdim4 .NE. xdim4_math_MD_kernel_eqV_h) .OR. &
  (ydim4 .NE. ydim4_math_MD_kernel_eqV_h) .OR. &
  (xdim5 .NE. xdim5_math_MD_kernel_eqV_h) .OR. &
  (ydim5 .NE. ydim5_math_MD_kernel_eqV_h) .OR. &
  (xdim6 .NE. xdim6_math_MD_kernel_eqV_h) .OR. &
  (ydim6 .NE. ydim6_math_MD_kernel_eqV_h) ) THEN
    xdim1_math_MD_kernel_eqV = xdim1
    xdim1_math_MD_kernel_eqV_h = xdim1
    ydim1_math_MD_kernel_eqV = ydim1
    ydim1_math_MD_kernel_eqV_h = ydim1
    xdim2_math_MD_kernel_eqV = xdim2
    xdim2_math_MD_kernel_eqV_h = xdim2
    ydim2_math_MD_kernel_eqV = ydim2
    ydim2_math_MD_kernel_eqV_h = ydim2
    xdim3_math_MD_kernel_eqV = xdim3
    xdim3_math_MD_kernel_eqV_h = xdim3
    ydim3_math_MD_kernel_eqV = ydim3
    ydim3_math_MD_kernel_eqV_h = ydim3
    xdim4_math_MD_kernel_eqV = xdim4
    xdim4_math_MD_kernel_eqV_h = xdim4
    ydim4_math_MD_kernel_eqV = ydim4
    ydim4_math_MD_kernel_eqV_h = ydim4
    xdim5_math_MD_kernel_eqV = xdim5
    xdim5_math_MD_kernel_eqV_h = xdim5
    ydim5_math_MD_kernel_eqV = ydim5
    ydim5_math_MD_kernel_eqV_h = ydim5
    xdim6_math_MD_kernel_eqV = xdim6
    xdim6_math_MD_kernel_eqV_h = xdim6
    ydim6_math_MD_kernel_eqV = ydim6
    ydim6_math_MD_kernel_eqV_h = ydim6
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)


  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,11)
  call ops_halo_exchanges(opsArgArray,11,range)
  call ops_H_D_exchanges_device(opsArgArray,11)

  call ops_timers_core(t2)
  call math_MD_kernel_eqV_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Local, &
  & opsDat4Local, &
  & opsDat5Local, &
  & opsDat6Local, &
  & opsDat7Host, &
  & opsDat8Host, &
  & opsDat9Host(1), &
  & opsDat10Host(1), &
  & opsDat11Host(1), &
  & dat1_base, &
  & dat2_base, &
  & dat3_base, &
  & dat4_base, &
  & dat5_base, &
  & dat6_base, &
  & x_size, y_size, z_size )

  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 11)
  call ops_set_halo_dirtybit3(opsArg1,range)
  call ops_set_halo_dirtybit3(opsArg2,range)
  call ops_set_halo_dirtybit3(opsArg3,range)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start, end, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg3,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg4,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg5,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg6,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(211,userSubroutine,t3-t2,t2-t1,transfer_total,0)
end subroutine
END MODULE
