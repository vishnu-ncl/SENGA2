!
! auto-generated by ops_fortran.py
!

MODULE FLAMIN_KERNEL_SET_VELOCITY_TGV_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

integer(4), constant :: xdim1_flamin_kernel_set_velocity_tgv
integer(4):: xdim1_flamin_kernel_set_velocity_tgv_h  = -1
integer(4), constant :: ydim1_flamin_kernel_set_velocity_tgv
integer(4):: ydim1_flamin_kernel_set_velocity_tgv_h  = -1
#define OPS_ACC1(x,y,z) (x+xdim1_flamin_kernel_set_velocity_tgv*(y)+xdim1_flamin_kernel_set_velocity_tgv*ydim1_flamin_kernel_set_velocity_tgv*(z)+1)

integer(4), constant :: xdim2_flamin_kernel_set_velocity_tgv
integer(4):: xdim2_flamin_kernel_set_velocity_tgv_h  = -1
integer(4), constant :: ydim2_flamin_kernel_set_velocity_tgv
integer(4):: ydim2_flamin_kernel_set_velocity_tgv_h  = -1
#define OPS_ACC2(x,y,z) (x+xdim2_flamin_kernel_set_velocity_tgv*(y)+xdim2_flamin_kernel_set_velocity_tgv*ydim2_flamin_kernel_set_velocity_tgv*(z)+1)

integer(4), constant :: xdim3_flamin_kernel_set_velocity_tgv
integer(4):: xdim3_flamin_kernel_set_velocity_tgv_h  = -1
integer(4), constant :: ydim3_flamin_kernel_set_velocity_tgv
integer(4):: ydim3_flamin_kernel_set_velocity_tgv_h  = -1
#define OPS_ACC3(x,y,z) (x+xdim3_flamin_kernel_set_velocity_tgv*(y)+xdim3_flamin_kernel_set_velocity_tgv*ydim3_flamin_kernel_set_velocity_tgv*(z)+1)

integer(4), constant :: xdim4_flamin_kernel_set_velocity_tgv
integer(4):: xdim4_flamin_kernel_set_velocity_tgv_h  = -1
integer(4), constant :: ydim4_flamin_kernel_set_velocity_tgv
integer(4):: ydim4_flamin_kernel_set_velocity_tgv_h  = -1
#define OPS_ACC4(x,y,z) (x+xdim4_flamin_kernel_set_velocity_tgv*(y)+xdim4_flamin_kernel_set_velocity_tgv*ydim4_flamin_kernel_set_velocity_tgv*(z)+1)





contains

!user function
attributes (device) SUBROUTINE flamin_kernel_set_velocity_tgv_gpu(urun, vrun, wrun, prun, prin, drin, u0, deltagx, deltagy, deltagz, angfrx, angfry, angfrz, idx)
    use data_types
    implicit none

    real(kind=8), dimension(1) :: urun, vrun, wrun, prun
    real(kind=8), intent(in) :: prin,drin,u0, deltagx, deltagy, deltagz
    real(kind=8), intent(in) :: angfrx, angfry, angfrz
    integer(kind=4), dimension(3), intent(in) :: idx

    real(kind=8) :: xcoord,ycoord,zcoord
    real(kind=8) :: xrgmnt,yrgmnt,zrgmnt
    integer(kind=4) :: ix, iy, iz

    ix = idx(1)
    iy = idx(2)
    iz = idx(3)

    xcoord = REAL(ix-1,kind=8)*deltagx
    ycoord = REAL(iy-1,kind=8)*deltagy
    zcoord = REAL(iz-1,kind=8)*deltagz

    xrgmnt = angfrx*xcoord
    yrgmnt = angfry*ycoord
    zrgmnt = angfrz*zcoord

   urun(OPS_ACC1(0,0,0)) = u0 * dsin(xrgmnt) * dcos(yrgmnt) * dcos(zrgmnt)
   vrun(OPS_ACC2(0,0,0)) = -u0 * dcos(xrgmnt) * dsin(yrgmnt) * dcos(zrgmnt)
   wrun(OPS_ACC3(0,0,0)) = 0.0_8

   xrgmnt = 2.0_8*xrgmnt
   yrgmnt = 2.0_8*yrgmnt
   zrgmnt = 2.0_8*zrgmnt

   prun(OPS_ACC4(0,0,0)) = prin+((drin*u0*u0)/16.0_8)*(dcos(xrgmnt)+dcos(yrgmnt))*(dcos(zrgmnt)+2.0_8)

END SUBROUTINE

#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4


!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine flamin_kernel_set_velocity_tgv_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsDat3Local, &
& opsDat4Local, &
& opsGblDat5Device,   &
& opsGblDat6Device,   &
& opsGblDat7Device,   &
& opsGblDat8Device,   &
& opsGblDat9Device,   &
& opsGblDat10Device,   &
& opsGblDat11Device,   &
& opsGblDat12Device,   &
& opsGblDat13Device,   &
& idx, &
& dat1_base, &
& dat2_base, &
& dat3_base, &
& dat4_base, &
& size1, size2, size3 )

  IMPLICIT NONE

  real(kind=8), device, dimension(*), intent(inout) :: opsDat1Local(*)
  integer(4) :: arg1
  real(kind=8), device, dimension(*), intent(inout) :: opsDat2Local(*)
  integer(4) :: arg2
  real(kind=8), device, dimension(*), intent(inout) :: opsDat3Local(*)
  integer(4) :: arg3
  real(kind=8), device, dimension(*), intent(inout) :: opsDat4Local(*)
  integer(4) :: arg4
  integer(4), dimension(3), intent(in) :: idx
  integer(4), dimension(3)             :: idx_local
  real(kind=8), value :: opsGblDat5Device
  real(kind=8), value :: opsGblDat6Device
  real(kind=8), value :: opsGblDat7Device
  real(kind=8), value :: opsGblDat8Device
  real(kind=8), value :: opsGblDat9Device
  real(kind=8), value :: opsGblDat10Device
  real(kind=8), value :: opsGblDat11Device
  real(kind=8), value :: opsGblDat12Device
  real(kind=8), value :: opsGblDat13Device
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4), value :: dat3_base
  integer(4), value :: dat4_base
  integer(4), value :: size1, size2, size3
  integer(4)        :: n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  idx_local(1) = idx(1)+ n_x-1
  idx_local(2) = idx(2)+ n_y-1
  idx_local(3) = idx(3)+ n_z-1
  arg1 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_flamin_kernel_set_velocity_tgv + (n_z-1) * 1*1 * xdim1_flamin_kernel_set_velocity_tgv * ydim1_flamin_kernel_set_velocity_tgv
  arg2 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_flamin_kernel_set_velocity_tgv + (n_z-1) * 1*1 * xdim2_flamin_kernel_set_velocity_tgv * ydim2_flamin_kernel_set_velocity_tgv
  arg3 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim3_flamin_kernel_set_velocity_tgv + (n_z-1) * 1*1 * xdim3_flamin_kernel_set_velocity_tgv * ydim3_flamin_kernel_set_velocity_tgv
  arg4 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim4_flamin_kernel_set_velocity_tgv + (n_z-1) * 1*1 * xdim4_flamin_kernel_set_velocity_tgv * ydim4_flamin_kernel_set_velocity_tgv
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN

    call flamin_kernel_set_velocity_tgv_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsDat3Local(dat3_base+arg3), &
    & opsDat4Local(dat4_base+arg4), &
    & opsGblDat5Device, &
    & opsGblDat6Device, &
    & opsGblDat7Device, &
    & opsGblDat8Device, &
    & opsGblDat9Device, &
    & opsGblDat10Device, &
    & opsGblDat11Device, &
    & opsGblDat12Device, &
    & opsGblDat13Device, &
    & idx_local )

  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine flamin_kernel_set_velocity_tgv_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5, &
& opsArg6, &
& opsArg7, &
& opsArg8, &
& opsArg9, &
& opsArg10, &
& opsArg11, &
& opsArg12, &
& opsArg13, &
& opsArg14)

  USE CUDAFOR
  IMPLICIT NONE

  character(kind=c_char,len=*), intent(in) :: userSubroutine
  type(ops_block), intent(in) :: block
  integer(4), intent(in):: dim
  integer(4), dimension(2*dim), intent(in) :: range
  real(8) :: t1,t2,t3
  real(4) :: transfer_total, transfer
  integer(4) :: istat

  type(ops_arg), intent(in) :: opsArg1
  real(kind=8), dimension(:), device, pointer  :: opsDat1Local
  integer(4) :: opsDat1Cardinality
  integer(4), pointer, dimension(:) :: dat1_size
  integer(4) :: dat1_base
  integer(4) :: xdim1
  integer(4) :: ydim1, zdim1

  type(ops_arg), intent(in) :: opsArg2
  real(kind=8), dimension(:), device, pointer  :: opsDat2Local
  integer(4) :: opsDat2Cardinality
  integer(4), pointer, dimension(:) :: dat2_size
  integer(4) :: dat2_base
  integer(4) :: xdim2
  integer(4) :: ydim2, zdim2

  type(ops_arg), intent(in) :: opsArg3
  real(kind=8), dimension(:), device, pointer  :: opsDat3Local
  integer(4) :: opsDat3Cardinality
  integer(4), pointer, dimension(:) :: dat3_size
  integer(4) :: dat3_base
  integer(4) :: xdim3
  integer(4) :: ydim3, zdim3

  type(ops_arg), intent(in) :: opsArg4
  real(kind=8), dimension(:), device, pointer  :: opsDat4Local
  integer(4) :: opsDat4Cardinality
  integer(4), pointer, dimension(:) :: dat4_size
  integer(4) :: dat4_base
  integer(4) :: xdim4
  integer(4) :: ydim4, zdim4

  type(ops_arg), intent(in) :: opsArg14

  type(ops_arg), intent(in) :: opsArg5
  integer(4) :: opsDat5Cardinality
  real(kind=8), dimension(:), pointer :: opsDat5Host
  type(ops_arg), intent(in) :: opsArg6
  integer(4) :: opsDat6Cardinality
  real(kind=8), dimension(:), pointer :: opsDat6Host
  type(ops_arg), intent(in) :: opsArg7
  integer(4) :: opsDat7Cardinality
  real(kind=8), dimension(:), pointer :: opsDat7Host
  type(ops_arg), intent(in) :: opsArg8
  integer(4) :: opsDat8Cardinality
  real(kind=8), dimension(:), pointer :: opsDat8Host
  type(ops_arg), intent(in) :: opsArg9
  integer(4) :: opsDat9Cardinality
  real(kind=8), dimension(:), pointer :: opsDat9Host
  type(ops_arg), intent(in) :: opsArg10
  integer(4) :: opsDat10Cardinality
  real(kind=8), dimension(:), pointer :: opsDat10Host
  type(ops_arg), intent(in) :: opsArg11
  integer(4) :: opsDat11Cardinality
  real(kind=8), dimension(:), pointer :: opsDat11Host
  type(ops_arg), intent(in) :: opsArg12
  integer(4) :: opsDat12Cardinality
  real(kind=8), dimension(:), pointer :: opsDat12Host
  type(ops_arg), intent(in) :: opsArg13
  integer(4) :: opsDat13Cardinality
  real(kind=8), dimension(:), pointer :: opsDat13Host

  integer(4) :: x_size, y_size, z_size
  integer(4), dimension(3) :: start_indx, end_indx
  integer(4), dimension(3), device :: idx
  integer(4), dimension(3)         :: idx_h
  integer(4) :: n
  integer(4) :: i10
  integer(4) :: i20
  integer(4) :: blocksPerGrid
  integer(4) :: nshared
  integer(4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type(ops_arg), dimension(14) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5
  opsArgArray(6) = opsArg6
  opsArgArray(7) = opsArg7
  opsArgArray(8) = opsArg8
  opsArgArray(9) = opsArg9
  opsArgArray(10) = opsArg10
  opsArgArray(11) = opsArg11
  opsArgArray(12) = opsArg12
  opsArgArray(13) = opsArg13
  opsArgArray(14) = opsArg14

  call setKernelTime(503,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start_indx, end_indx, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start_indx(n) = range(2*n-1)
    end_indx(n)   = range(2*n)
  END DO
#endif

#ifdef OPS_MPI
  call getIdx(block,start_indx,idx_h)
  idx = idx_h
#else
  idx(1) = start_indx(1)
  idx(2) = start_indx(2)
  idx(3) = start_indx(3)
#endif


  x_size = MAX(0,end_indx(1)-start_indx(1)+1)
  y_size = MAX(0,end_indx(2)-start_indx(2)+1)
  z_size = MAX(0,end_indx(3)-start_indx(3)+1)

  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start_indx,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start_indx,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg3),dat3_size,(/dim/))
  xdim3 = dat3_size(1)
  ydim3 = dat3_size(2)
  zdim3 = dat3_size(3)
  opsDat3Cardinality = opsArg3%dim * xdim3 * ydim3 * zdim3
  dat3_base = getDatBaseFromOpsArg3D(opsArg3,start_indx,1)
  call c_f_pointer(opsArg3%data_d,opsDat3Local,(/opsDat3Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg4),dat4_size,(/dim/))
  xdim4 = dat4_size(1)
  ydim4 = dat4_size(2)
  zdim4 = dat4_size(3)
  opsDat4Cardinality = opsArg4%dim * xdim4 * ydim4 * zdim4
  dat4_base = getDatBaseFromOpsArg3D(opsArg4,start_indx,1)
  call c_f_pointer(opsArg4%data_d,opsDat4Local,(/opsDat4Cardinality/))

  opsDat5Cardinality = opsArg5%dim
  call c_f_pointer(opsArg5%data,opsDat5Host,(/opsDat5Cardinality/))

  opsDat6Cardinality = opsArg6%dim
  call c_f_pointer(opsArg6%data,opsDat6Host,(/opsDat6Cardinality/))

  opsDat7Cardinality = opsArg7%dim
  call c_f_pointer(opsArg7%data,opsDat7Host,(/opsDat7Cardinality/))

  opsDat8Cardinality = opsArg8%dim
  call c_f_pointer(opsArg8%data,opsDat8Host,(/opsDat8Cardinality/))

  opsDat9Cardinality = opsArg9%dim
  call c_f_pointer(opsArg9%data,opsDat9Host,(/opsDat9Cardinality/))

  opsDat10Cardinality = opsArg10%dim
  call c_f_pointer(opsArg10%data,opsDat10Host,(/opsDat10Cardinality/))

  opsDat11Cardinality = opsArg11%dim
  call c_f_pointer(opsArg11%data,opsDat11Host,(/opsDat11Cardinality/))

  opsDat12Cardinality = opsArg12%dim
  call c_f_pointer(opsArg12%data,opsDat12Host,(/opsDat12Cardinality/))

  opsDat13Cardinality = opsArg13%dim
  call c_f_pointer(opsArg13%data,opsDat13Host,(/opsDat13Cardinality/))


  IF ((xdim1 .NE. xdim1_flamin_kernel_set_velocity_tgv_h) .OR. &
  (ydim1 .NE. ydim1_flamin_kernel_set_velocity_tgv_h) .OR. &
  (xdim2 .NE. xdim2_flamin_kernel_set_velocity_tgv_h) .OR. &
  (ydim2 .NE. ydim2_flamin_kernel_set_velocity_tgv_h) .OR. &
  (xdim3 .NE. xdim3_flamin_kernel_set_velocity_tgv_h) .OR. &
  (ydim3 .NE. ydim3_flamin_kernel_set_velocity_tgv_h) .OR. &
  (xdim4 .NE. xdim4_flamin_kernel_set_velocity_tgv_h) .OR. &
  (ydim4 .NE. ydim4_flamin_kernel_set_velocity_tgv_h) ) THEN
    xdim1_flamin_kernel_set_velocity_tgv = xdim1
    xdim1_flamin_kernel_set_velocity_tgv_h = xdim1
    ydim1_flamin_kernel_set_velocity_tgv = ydim1
    ydim1_flamin_kernel_set_velocity_tgv_h = ydim1
    xdim2_flamin_kernel_set_velocity_tgv = xdim2
    xdim2_flamin_kernel_set_velocity_tgv_h = xdim2
    ydim2_flamin_kernel_set_velocity_tgv = ydim2
    ydim2_flamin_kernel_set_velocity_tgv_h = ydim2
    xdim3_flamin_kernel_set_velocity_tgv = xdim3
    xdim3_flamin_kernel_set_velocity_tgv_h = xdim3
    ydim3_flamin_kernel_set_velocity_tgv = ydim3
    ydim3_flamin_kernel_set_velocity_tgv_h = ydim3
    xdim4_flamin_kernel_set_velocity_tgv = xdim4
    xdim4_flamin_kernel_set_velocity_tgv_h = xdim4
    ydim4_flamin_kernel_set_velocity_tgv = ydim4
    ydim4_flamin_kernel_set_velocity_tgv_h = ydim4
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)


  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,14)
  call ops_halo_exchanges(opsArgArray,14,range)
  call ops_H_D_exchanges_device(opsArgArray,14)

  call ops_timers_core(t2)

  call flamin_kernel_set_velocity_tgv_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Local, &
  & opsDat4Local, &
  & opsDat5Host(1), &
  & opsDat6Host(1), &
  & opsDat7Host(1), &
  & opsDat8Host(1), &
  & opsDat9Host(1), &
  & opsDat10Host(1), &
  & opsDat11Host(1), &
  & opsDat12Host(1), &
  & opsDat13Host(1), &
  & idx, &
  & dat1_base, &
  & dat2_base, &
  & dat3_base, &
  & dat4_base, &
  & x_size, y_size, z_size )

  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 14)
  call ops_set_halo_dirtybit3(opsArg1,range)
  call ops_set_halo_dirtybit3(opsArg2,range)
  call ops_set_halo_dirtybit3(opsArg3,range)
  call ops_set_halo_dirtybit3(opsArg4,range)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start_indx, end_indx, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg3,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg4,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(503,userSubroutine,t3-t2,t2-t1,transfer_total,0)

end subroutine

END MODULE
