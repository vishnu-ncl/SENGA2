!
! auto-generated by ops_fortran.py
!
MODULE MATH_MD_KERNEL_EQAC_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opGblDat3Device_math_MD_kernel_eqAC
integer, DIMENSION(:), DEVICE, ALLOCATABLE :: opGblDat4Device_math_MD_kernel_eqAC
INTEGER(KIND=4), constant :: xdim2_math_MD_kernel_eqAC
INTEGER(KIND=4):: xdim2_math_MD_kernel_eqAC_h  = -1
INTEGER(KIND=4), constant :: ydim2_math_MD_kernel_eqAC
INTEGER(KIND=4):: ydim2_math_MD_kernel_eqAC_h  = -1
INTEGER(KIND=4), constant :: zdim2_math_MD_kernel_eqAC
INTEGER(KIND=4):: zdim2_math_MD_kernel_eqAC_h  = -1
#define OPS_ACC2(x,y,z) (x+xdim2_math_MD_kernel_eqAC*(y)+xdim2_math_MD_kernel_eqAC*ydim2_math_MD_kernel_eqAC*(z)+1)

INTEGER(KIND=4), constant :: xdim1_math_MD_kernel_eqAC
INTEGER(KIND=4):: xdim1_math_MD_kernel_eqAC_h  = -1
INTEGER(KIND=4), constant :: ydim1_math_MD_kernel_eqAC
INTEGER(KIND=4):: ydim1_math_MD_kernel_eqAC_h  = -1
#define OPS_ACC_MD1(d,x,y,z) ((x)*2+(d)+(xdim1_math_MD_kernel_eqAC*(y)*2)+(xdim1_math_MD_kernel_eqAC*ydim1_math_MD_kernel_eqAC*(z)*2))

contains

!user function
attributes (device) SUBROUTINE math_md_kernel_eqac_gpu(itndex,trun,tinthi,ntint,nspec)
    use data_types
    implicit none

    real(kind=8), dimension(1), intent(in) :: trun
    integer, dimension(1) :: itndex

    integer, intent(in) ::  nspec

    real(kind=8), dimension(ntinmx_OPSCONSTANT,nspcmx_OPSCONSTANT), intent(in) :: tinthi
    integer, dimension(nspcmx_OPSCONSTANT), intent(in) :: ntint

    integer :: iindex,ispec,itint,ipower

    DO iindex = 1,nintmx_OPSCONSTANT
        itndex(OPS_ACC_MD1(iindex,0,0,0)) = 0
    END DO

    DO ispec = 1, nspec

        itint = 1

        DO WHILE (trun(OPS_ACC2(0,0,0)) > tinthi(itint,ispec) .and. itint < ntint(ispec))
            itint = itint + 1
        END DO

        iindex = 1 + (ispec-1)/nspimx_OPSCONSTANT
        ipower = ispec - (iindex-1)*nspimx_OPSCONSTANT - 1

        itndex(OPS_ACC_MD1(iindex,0,0,0)) = itndex(OPS_ACC_MD1(iindex,0,0,0))  &
            +(itint-1)*ntbase_OPSCONSTANT**ipower

    END DO

END SUBROUTINE

#undef OPS_ACC2

#undef OPS_ACC_MD1


!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine math_MD_kernel_eqAC_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsGblDat3Device,   &
& opsGblDat4Device,   &
& opsGblDat5Device,   &
& dat1_base, &
& dat2_base, &
& size1, size2, size3 )
  IMPLICIT NONE
  integer, DEVICE :: opsDat1Local(*)
  integer(4) arg1
  real(8), DEVICE, INTENT(IN) :: opsDat2Local(*)
  integer(4) arg2
  real(8), DEVICE :: opsGblDat3Device(:)
  integer, DEVICE :: opsGblDat4Device(:)
  integer, VALUE :: opsGblDat5Device
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4) start(3)
  integer(4) end(3)
  integer, value :: size1,size2,size3
  integer n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  arg1 = (n_x-1) * 1*2 + (n_y-1) * 1*2 * xdim1_math_MD_kernel_eqAC + (n_z-1) * 1*2 * xdim1_math_MD_kernel_eqAC * ydim1_math_MD_kernel_eqAC
  arg2 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_math_MD_kernel_eqAC + (n_z-1) * 1*1 * xdim2_math_MD_kernel_eqAC * ydim2_math_MD_kernel_eqAC
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN
    call math_MD_kernel_eqAC_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsGblDat3Device(1), &
    & opsGblDat4Device(1), &
    & opsGblDat5Device )

  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine math_MD_kernel_eqAC_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5)
  use cudafor
  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( ops_block ), INTENT(IN) :: block
  integer(kind=4), INTENT(IN):: dim
  integer(kind=4)   , DIMENSION(2*dim), INTENT(IN) :: range
  real(kind=8) t1,t2,t3
  real(kind=4) transfer_total, transfer
  integer(kind=4) :: istat

  type ( ops_arg )  , INTENT(IN) :: opsArg1
  integer, DIMENSION(:), DEVICE, POINTER  :: opsDat1Local
  integer(kind=4) :: opsDat1Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat1_size
  integer(kind=4) :: dat1_base
  INTEGER(KIND=4) :: xdim1
  INTEGER(KIND=4) :: multi_d1
  INTEGER(KIND=4) :: ydim1, zdim1

  type ( ops_arg )  , INTENT(IN) :: opsArg2
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat2Local
  integer(kind=4) :: opsDat2Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat2_size
  integer(kind=4) :: dat2_base
  INTEGER(KIND=4) :: xdim2
  INTEGER(KIND=4) :: ydim2, zdim2

  type ( ops_arg )  , INTENT(IN) :: opsArg3
  integer(kind=4) :: opsDat3Cardinality
  real(8), DIMENSION(:), DEVICE, POINTER :: opsDat3Host
  type ( ops_arg )  , INTENT(IN) :: opsArg4
  integer(kind=4) :: opsDat4Cardinality
  integer, DIMENSION(:), DEVICE, POINTER :: opsDat4Host
  type ( ops_arg )  , INTENT(IN) :: opsArg5
  integer(kind=4) :: opsDat5Cardinality
  integer, DIMENSION(:), POINTER :: opsDat5Host

  integer x_size, y_size, z_size
  integer start(3)
  integer end(3)
  integer(kind=4) :: n
  integer(kind=4) :: i10
  integer(kind=4) :: i20
  integer(kind=4) :: blocksPerGrid
  integer(kind=4) :: nshared
  integer(kind=4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type ( ops_arg ) , DIMENSION(5) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5

  call setKernelTime(527,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start, end, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start(n) = range(2*n-1)
    end(n) = range(2*n)
  END DO
#endif


  x_size = MAX(0,end(1)-start(1)+1)
  y_size = MAX(0,end(2)-start(2)+1)
  z_size = MAX(0,end(3)-start(3)+1)

  call ops_upload_gbls(opsArgArray,5)
  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  multi_d1 = getDatDimFromOpsArg(opsArg1) ! dimension of the dat
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start,multi_d1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  opsDat3Cardinality = opsArg3%dim
  call c_f_pointer(opsArgArray(3)%data_d,opsDat3Host,(/opsDat3Cardinality/))

  opsDat4Cardinality = opsArg4%dim
  call c_f_pointer(opsArgArray(4)%data_d,opsDat4Host,(/opsDat4Cardinality/))

  opsDat5Cardinality = opsArg5%dim
  call c_f_pointer(opsArg5%data,opsDat5Host,(/opsDat5Cardinality/))

  IF ((xdim1 .NE. xdim1_math_MD_kernel_eqAC_h) .OR. &
  (ydim1 .NE. ydim1_math_MD_kernel_eqAC_h) .OR. &
  (xdim2 .NE. xdim2_math_MD_kernel_eqAC_h) .OR. &
  (ydim2 .NE. ydim2_math_MD_kernel_eqAC_h) ) THEN
    xdim1_math_MD_kernel_eqAC = xdim1
    xdim1_math_MD_kernel_eqAC_h = xdim1
    ydim1_math_MD_kernel_eqAC = ydim1
    ydim1_math_MD_kernel_eqAC_h = ydim1
    xdim2_math_MD_kernel_eqAC = xdim2
    xdim2_math_MD_kernel_eqAC_h = xdim2
    ydim2_math_MD_kernel_eqAC = ydim2
    ydim2_math_MD_kernel_eqAC_h = ydim2
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)


  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,5)
  call ops_halo_exchanges(opsArgArray,5,range)
  call ops_H_D_exchanges_device(opsArgArray,5)

  call ops_timers_core(t2)
  call math_MD_kernel_eqAC_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Host, &
  & opsDat4Host, &
  & opsDat5Host(1), &
  & dat1_base, &
  & dat2_base, &
  & x_size, y_size, z_size )

  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 5)
  call ops_set_halo_dirtybit3(opsArg1,range)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start, end, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(527,userSubroutine,t3-t2,t2-t1,transfer_total,0)
end subroutine
END MODULE
