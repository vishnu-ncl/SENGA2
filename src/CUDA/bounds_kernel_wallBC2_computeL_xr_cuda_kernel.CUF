!
! auto-generated by ops_fortran.py
!

MODULE BOUNDS_KERNEL_WALLBC2_COMPUTEL_XR_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

integer(4), constant :: xdim1_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim1_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim1_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim1_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC1(x,y,z) (x+xdim1_bounds_kernel_wallBC2_computeL_xr*(y)+xdim1_bounds_kernel_wallBC2_computeL_xr*ydim1_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim2_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim2_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim2_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim2_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC2(x,y,z) (x+xdim2_bounds_kernel_wallBC2_computeL_xr*(y)+xdim2_bounds_kernel_wallBC2_computeL_xr*ydim2_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim3_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim3_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim3_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim3_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC3(x,y,z) (x+xdim3_bounds_kernel_wallBC2_computeL_xr*(y)+xdim3_bounds_kernel_wallBC2_computeL_xr*ydim3_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim4_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim4_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim4_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim4_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC4(x,y,z) (x+xdim4_bounds_kernel_wallBC2_computeL_xr*(y)+xdim4_bounds_kernel_wallBC2_computeL_xr*ydim4_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim5_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim5_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim5_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim5_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC5(x,y,z) (x+xdim5_bounds_kernel_wallBC2_computeL_xr*(y)+xdim5_bounds_kernel_wallBC2_computeL_xr*ydim5_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim6_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim6_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim6_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim6_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC6(x,y,z) (x+xdim6_bounds_kernel_wallBC2_computeL_xr*(y)+xdim6_bounds_kernel_wallBC2_computeL_xr*ydim6_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim7_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim7_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim7_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim7_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC7(x,y,z) (x+xdim7_bounds_kernel_wallBC2_computeL_xr*(y)+xdim7_bounds_kernel_wallBC2_computeL_xr*ydim7_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim8_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim8_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim8_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim8_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC8(x,y,z) (x+xdim8_bounds_kernel_wallBC2_computeL_xr*(y)+xdim8_bounds_kernel_wallBC2_computeL_xr*ydim8_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim9_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim9_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim9_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim9_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC9(x,y,z) (x+xdim9_bounds_kernel_wallBC2_computeL_xr*(y)+xdim9_bounds_kernel_wallBC2_computeL_xr*ydim9_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim10_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim10_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim10_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim10_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC10(x,y,z) (x+xdim10_bounds_kernel_wallBC2_computeL_xr*(y)+xdim10_bounds_kernel_wallBC2_computeL_xr*ydim10_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim11_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim11_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim11_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim11_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC11(x,y,z) (x+xdim11_bounds_kernel_wallBC2_computeL_xr*(y)+xdim11_bounds_kernel_wallBC2_computeL_xr*ydim11_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim12_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim12_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim12_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim12_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC12(x,y,z) (x+xdim12_bounds_kernel_wallBC2_computeL_xr*(y)+xdim12_bounds_kernel_wallBC2_computeL_xr*ydim12_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim13_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim13_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim13_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim13_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC13(x,y,z) (x+xdim13_bounds_kernel_wallBC2_computeL_xr*(y)+xdim13_bounds_kernel_wallBC2_computeL_xr*ydim13_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim14_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim14_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim14_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim14_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC14(x,y,z) (x+xdim14_bounds_kernel_wallBC2_computeL_xr*(y)+xdim14_bounds_kernel_wallBC2_computeL_xr*ydim14_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim15_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim15_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim15_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim15_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC15(x,y,z) (x+xdim15_bounds_kernel_wallBC2_computeL_xr*(y)+xdim15_bounds_kernel_wallBC2_computeL_xr*ydim15_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim16_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim16_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim16_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim16_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC16(x,y,z) (x+xdim16_bounds_kernel_wallBC2_computeL_xr*(y)+xdim16_bounds_kernel_wallBC2_computeL_xr*ydim16_bounds_kernel_wallBC2_computeL_xr*(z)+1)

integer(4), constant :: xdim17_bounds_kernel_wallBC2_computeL_xr
integer(4):: xdim17_bounds_kernel_wallBC2_computeL_xr_h  = -1
integer(4), constant :: ydim17_bounds_kernel_wallBC2_computeL_xr
integer(4):: ydim17_bounds_kernel_wallBC2_computeL_xr_h  = -1
#define OPS_ACC17(x,y,z) (x+xdim17_bounds_kernel_wallBC2_computeL_xr*(y)+xdim17_bounds_kernel_wallBC2_computeL_xr*ydim17_bounds_kernel_wallBC2_computeL_xr*(z)+1)


















contains

!user function
attributes (device) SUBROUTINE bounds_kernel_wallbc2_computel_xr_gpu(bcl1xr,bcl2xr,bcl3xr,bcl4xr,bcl5xr,strdxr,acouxr,struxr,ova2xr,dudtxr,dvdtxr,dwdtxr,gam1xr,dtdtxr,strtxr,sorpxr,strpxr)
    use data_types
    implicit none

    real(kind=8), dimension(1) :: bcl1xr,bcl2xr,bcl3xr,bcl4xr,bcl5xr
    real(kind=8), dimension(1), intent(in) :: strdxr,acouxr,struxr,ova2xr,dudtxr,dvdtxr,dwdtxr,gam1xr,dtdtxr,strtxr,sorpxr,strpxr
    real(kind=8) :: fornow

    fornow = strdxr(OPS_ACC6(0,0,0))*acouxr(OPS_ACC7(0,0,0))*bcl1xr(OPS_ACC1(0,0,0))
    bcl1xr(OPS_ACC1(0,0,0)) = 0.5_8*(struxr(OPS_ACC8(0,0,0))-acouxr(OPS_ACC7(0,0,0)))  &
            *(bcl5xr(OPS_ACC5(0,0,0))-fornow)
    bcl2xr(OPS_ACC2(0,0,0)) = struxr(OPS_ACC8(0,0,0))  &
            *(bcl2xr(OPS_ACC2(0,0,0))-bcl5xr(OPS_ACC5(0,0,0))*ova2xr(OPS_ACC9(0,0,0)))
    bcl3xr(OPS_ACC3(0,0,0)) = struxr(OPS_ACC8(0,0,0))*bcl3xr(OPS_ACC3(0,0,0))
    bcl4xr(OPS_ACC4(0,0,0)) = struxr(OPS_ACC8(0,0,0))*bcl4xr(OPS_ACC4(0,0,0))
    bcl5xr(OPS_ACC5(0,0,0)) = 0.5_8*(struxr(OPS_ACC8(0,0,0))+acouxr(OPS_ACC7(0,0,0)))  &
            *(bcl5xr(OPS_ACC5(0,0,0))+fornow)


    bcl1xr(OPS_ACC1(0,0,0)) = bcl5xr(OPS_ACC5(0,0,0))  &
            + strdxr(OPS_ACC6(0,0,0))*acouxr(OPS_ACC7(0,0,0))*dudtxr(OPS_ACC10(0,0,0)) - bcl1xr(OPS_ACC1(0,0,0))
    bcl3xr(OPS_ACC3(0,0,0)) = -dvdtxr(OPS_ACC11(0,0,0)) - bcl3xr(OPS_ACC3(0,0,0))
    bcl4xr(OPS_ACC4(0,0,0)) = -dwdtxr(OPS_ACC12(0,0,0)) - bcl4xr(OPS_ACC4(0,0,0))
    bcl2xr(OPS_ACC2(0,0,0)) = gam1xr(OPS_ACC13(0,0,0))*ova2xr(OPS_ACC9(0,0,0))  &
            *(bcl1xr(OPS_ACC1(0,0,0))+bcl5xr(OPS_ACC5(0,0,0)))  &
            + strdxr(OPS_ACC6(0,0,0))*(dtdtxr(OPS_ACC14(0,0,0))/strtxr(OPS_ACC15(0,0,0))  &
            - sorpxr(OPS_ACC16(0,0,0))/strpxr(OPS_ACC17(0,0,0))) - bcl2xr(OPS_ACC2(0,0,0))

END SUBROUTINE

#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4
#undef OPS_ACC5
#undef OPS_ACC6
#undef OPS_ACC7
#undef OPS_ACC8
#undef OPS_ACC9
#undef OPS_ACC10
#undef OPS_ACC11
#undef OPS_ACC12
#undef OPS_ACC13
#undef OPS_ACC14
#undef OPS_ACC15
#undef OPS_ACC16
#undef OPS_ACC17


!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine bounds_kernel_wallBC2_computeL_xr_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsDat3Local, &
& opsDat4Local, &
& opsDat5Local, &
& opsDat6Local, &
& opsDat7Local, &
& opsDat8Local, &
& opsDat9Local, &
& opsDat10Local, &
& opsDat11Local, &
& opsDat12Local, &
& opsDat13Local, &
& opsDat14Local, &
& opsDat15Local, &
& opsDat16Local, &
& opsDat17Local, &
& dat1_base, &
& dat2_base, &
& dat3_base, &
& dat4_base, &
& dat5_base, &
& dat6_base, &
& dat7_base, &
& dat8_base, &
& dat9_base, &
& dat10_base, &
& dat11_base, &
& dat12_base, &
& dat13_base, &
& dat14_base, &
& dat15_base, &
& dat16_base, &
& dat17_base, &
& size1, size2, size3 )

  IMPLICIT NONE

  real(kind=8), device, dimension(*), intent(inout) :: opsDat1Local(*)
  integer(4) :: arg1
  real(kind=8), device, dimension(*), intent(inout) :: opsDat2Local(*)
  integer(4) :: arg2
  real(kind=8), device, dimension(*), intent(inout) :: opsDat3Local(*)
  integer(4) :: arg3
  real(kind=8), device, dimension(*), intent(inout) :: opsDat4Local(*)
  integer(4) :: arg4
  real(kind=8), device, dimension(*), intent(inout) :: opsDat5Local(*)
  integer(4) :: arg5
  real(kind=8), device, dimension(*), intent(in)    :: opsDat6Local
  integer(4) :: arg6
  real(kind=8), device, dimension(*), intent(in)    :: opsDat7Local
  integer(4) :: arg7
  real(kind=8), device, dimension(*), intent(in)    :: opsDat8Local
  integer(4) :: arg8
  real(kind=8), device, dimension(*), intent(in)    :: opsDat9Local
  integer(4) :: arg9
  real(kind=8), device, dimension(*), intent(in)    :: opsDat10Local
  integer(4) :: arg10
  real(kind=8), device, dimension(*), intent(in)    :: opsDat11Local
  integer(4) :: arg11
  real(kind=8), device, dimension(*), intent(in)    :: opsDat12Local
  integer(4) :: arg12
  real(kind=8), device, dimension(*), intent(in)    :: opsDat13Local
  integer(4) :: arg13
  real(kind=8), device, dimension(*), intent(in)    :: opsDat14Local
  integer(4) :: arg14
  real(kind=8), device, dimension(*), intent(in)    :: opsDat15Local
  integer(4) :: arg15
  real(kind=8), device, dimension(*), intent(in)    :: opsDat16Local
  integer(4) :: arg16
  real(kind=8), device, dimension(*), intent(in)    :: opsDat17Local
  integer(4) :: arg17
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4), value :: dat3_base
  integer(4), value :: dat4_base
  integer(4), value :: dat5_base
  integer(4), value :: dat6_base
  integer(4), value :: dat7_base
  integer(4), value :: dat8_base
  integer(4), value :: dat9_base
  integer(4), value :: dat10_base
  integer(4), value :: dat11_base
  integer(4), value :: dat12_base
  integer(4), value :: dat13_base
  integer(4), value :: dat14_base
  integer(4), value :: dat15_base
  integer(4), value :: dat16_base
  integer(4), value :: dat17_base
  integer(4), value :: size1, size2, size3
  integer(4)        :: n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  arg1 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim1_bounds_kernel_wallBC2_computeL_xr * ydim1_bounds_kernel_wallBC2_computeL_xr
  arg2 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim2_bounds_kernel_wallBC2_computeL_xr * ydim2_bounds_kernel_wallBC2_computeL_xr
  arg3 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim3_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim3_bounds_kernel_wallBC2_computeL_xr * ydim3_bounds_kernel_wallBC2_computeL_xr
  arg4 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim4_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim4_bounds_kernel_wallBC2_computeL_xr * ydim4_bounds_kernel_wallBC2_computeL_xr
  arg5 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim5_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim5_bounds_kernel_wallBC2_computeL_xr * ydim5_bounds_kernel_wallBC2_computeL_xr
  arg6 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim6_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim6_bounds_kernel_wallBC2_computeL_xr * ydim6_bounds_kernel_wallBC2_computeL_xr
  arg7 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim7_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim7_bounds_kernel_wallBC2_computeL_xr * ydim7_bounds_kernel_wallBC2_computeL_xr
  arg8 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim8_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim8_bounds_kernel_wallBC2_computeL_xr * ydim8_bounds_kernel_wallBC2_computeL_xr
  arg9 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim9_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim9_bounds_kernel_wallBC2_computeL_xr * ydim9_bounds_kernel_wallBC2_computeL_xr
  arg10 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim10_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim10_bounds_kernel_wallBC2_computeL_xr * ydim10_bounds_kernel_wallBC2_computeL_xr
  arg11 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim11_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim11_bounds_kernel_wallBC2_computeL_xr * ydim11_bounds_kernel_wallBC2_computeL_xr
  arg12 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim12_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim12_bounds_kernel_wallBC2_computeL_xr * ydim12_bounds_kernel_wallBC2_computeL_xr
  arg13 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim13_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim13_bounds_kernel_wallBC2_computeL_xr * ydim13_bounds_kernel_wallBC2_computeL_xr
  arg14 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim14_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim14_bounds_kernel_wallBC2_computeL_xr * ydim14_bounds_kernel_wallBC2_computeL_xr
  arg15 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim15_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim15_bounds_kernel_wallBC2_computeL_xr * ydim15_bounds_kernel_wallBC2_computeL_xr
  arg16 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim16_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim16_bounds_kernel_wallBC2_computeL_xr * ydim16_bounds_kernel_wallBC2_computeL_xr
  arg17 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim17_bounds_kernel_wallBC2_computeL_xr + (n_z-1) * 1*1 * xdim17_bounds_kernel_wallBC2_computeL_xr * ydim17_bounds_kernel_wallBC2_computeL_xr
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN

    call bounds_kernel_wallBC2_computeL_xr_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsDat3Local(dat3_base+arg3), &
    & opsDat4Local(dat4_base+arg4), &
    & opsDat5Local(dat5_base+arg5), &
    & opsDat6Local(dat6_base+arg6), &
    & opsDat7Local(dat7_base+arg7), &
    & opsDat8Local(dat8_base+arg8), &
    & opsDat9Local(dat9_base+arg9), &
    & opsDat10Local(dat10_base+arg10), &
    & opsDat11Local(dat11_base+arg11), &
    & opsDat12Local(dat12_base+arg12), &
    & opsDat13Local(dat13_base+arg13), &
    & opsDat14Local(dat14_base+arg14), &
    & opsDat15Local(dat15_base+arg15), &
    & opsDat16Local(dat16_base+arg16), &
    & opsDat17Local(dat17_base+arg17) )

  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine bounds_kernel_wallBC2_computeL_xr_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5, &
& opsArg6, &
& opsArg7, &
& opsArg8, &
& opsArg9, &
& opsArg10, &
& opsArg11, &
& opsArg12, &
& opsArg13, &
& opsArg14, &
& opsArg15, &
& opsArg16, &
& opsArg17)

  USE CUDAFOR
  IMPLICIT NONE

  character(kind=c_char,len=*), intent(in) :: userSubroutine
  type(ops_block), intent(in) :: block
  integer(4), intent(in):: dim
  integer(4), dimension(2*dim), intent(in) :: range
  real(8) :: t1,t2,t3
  real(4) :: transfer_total, transfer
  integer(4) :: istat

  type(ops_arg), intent(in) :: opsArg1
  real(kind=8), dimension(:), device, pointer  :: opsDat1Local
  integer(4) :: opsDat1Cardinality
  integer(4), pointer, dimension(:) :: dat1_size
  integer(4) :: dat1_base
  integer(4) :: xdim1
  integer(4) :: ydim1, zdim1

  type(ops_arg), intent(in) :: opsArg2
  real(kind=8), dimension(:), device, pointer  :: opsDat2Local
  integer(4) :: opsDat2Cardinality
  integer(4), pointer, dimension(:) :: dat2_size
  integer(4) :: dat2_base
  integer(4) :: xdim2
  integer(4) :: ydim2, zdim2

  type(ops_arg), intent(in) :: opsArg3
  real(kind=8), dimension(:), device, pointer  :: opsDat3Local
  integer(4) :: opsDat3Cardinality
  integer(4), pointer, dimension(:) :: dat3_size
  integer(4) :: dat3_base
  integer(4) :: xdim3
  integer(4) :: ydim3, zdim3

  type(ops_arg), intent(in) :: opsArg4
  real(kind=8), dimension(:), device, pointer  :: opsDat4Local
  integer(4) :: opsDat4Cardinality
  integer(4), pointer, dimension(:) :: dat4_size
  integer(4) :: dat4_base
  integer(4) :: xdim4
  integer(4) :: ydim4, zdim4

  type(ops_arg), intent(in) :: opsArg5
  real(kind=8), dimension(:), device, pointer  :: opsDat5Local
  integer(4) :: opsDat5Cardinality
  integer(4), pointer, dimension(:) :: dat5_size
  integer(4) :: dat5_base
  integer(4) :: xdim5
  integer(4) :: ydim5, zdim5

  type(ops_arg), intent(in) :: opsArg6
  real(kind=8), dimension(:), device, pointer  :: opsDat6Local
  integer(4) :: opsDat6Cardinality
  integer(4), pointer, dimension(:) :: dat6_size
  integer(4) :: dat6_base
  integer(4) :: xdim6
  integer(4) :: ydim6, zdim6

  type(ops_arg), intent(in) :: opsArg7
  real(kind=8), dimension(:), device, pointer  :: opsDat7Local
  integer(4) :: opsDat7Cardinality
  integer(4), pointer, dimension(:) :: dat7_size
  integer(4) :: dat7_base
  integer(4) :: xdim7
  integer(4) :: ydim7, zdim7

  type(ops_arg), intent(in) :: opsArg8
  real(kind=8), dimension(:), device, pointer  :: opsDat8Local
  integer(4) :: opsDat8Cardinality
  integer(4), pointer, dimension(:) :: dat8_size
  integer(4) :: dat8_base
  integer(4) :: xdim8
  integer(4) :: ydim8, zdim8

  type(ops_arg), intent(in) :: opsArg9
  real(kind=8), dimension(:), device, pointer  :: opsDat9Local
  integer(4) :: opsDat9Cardinality
  integer(4), pointer, dimension(:) :: dat9_size
  integer(4) :: dat9_base
  integer(4) :: xdim9
  integer(4) :: ydim9, zdim9

  type(ops_arg), intent(in) :: opsArg10
  real(kind=8), dimension(:), device, pointer  :: opsDat10Local
  integer(4) :: opsDat10Cardinality
  integer(4), pointer, dimension(:) :: dat10_size
  integer(4) :: dat10_base
  integer(4) :: xdim10
  integer(4) :: ydim10, zdim10

  type(ops_arg), intent(in) :: opsArg11
  real(kind=8), dimension(:), device, pointer  :: opsDat11Local
  integer(4) :: opsDat11Cardinality
  integer(4), pointer, dimension(:) :: dat11_size
  integer(4) :: dat11_base
  integer(4) :: xdim11
  integer(4) :: ydim11, zdim11

  type(ops_arg), intent(in) :: opsArg12
  real(kind=8), dimension(:), device, pointer  :: opsDat12Local
  integer(4) :: opsDat12Cardinality
  integer(4), pointer, dimension(:) :: dat12_size
  integer(4) :: dat12_base
  integer(4) :: xdim12
  integer(4) :: ydim12, zdim12

  type(ops_arg), intent(in) :: opsArg13
  real(kind=8), dimension(:), device, pointer  :: opsDat13Local
  integer(4) :: opsDat13Cardinality
  integer(4), pointer, dimension(:) :: dat13_size
  integer(4) :: dat13_base
  integer(4) :: xdim13
  integer(4) :: ydim13, zdim13

  type(ops_arg), intent(in) :: opsArg14
  real(kind=8), dimension(:), device, pointer  :: opsDat14Local
  integer(4) :: opsDat14Cardinality
  integer(4), pointer, dimension(:) :: dat14_size
  integer(4) :: dat14_base
  integer(4) :: xdim14
  integer(4) :: ydim14, zdim14

  type(ops_arg), intent(in) :: opsArg15
  real(kind=8), dimension(:), device, pointer  :: opsDat15Local
  integer(4) :: opsDat15Cardinality
  integer(4), pointer, dimension(:) :: dat15_size
  integer(4) :: dat15_base
  integer(4) :: xdim15
  integer(4) :: ydim15, zdim15

  type(ops_arg), intent(in) :: opsArg16
  real(kind=8), dimension(:), device, pointer  :: opsDat16Local
  integer(4) :: opsDat16Cardinality
  integer(4), pointer, dimension(:) :: dat16_size
  integer(4) :: dat16_base
  integer(4) :: xdim16
  integer(4) :: ydim16, zdim16

  type(ops_arg), intent(in) :: opsArg17
  real(kind=8), dimension(:), device, pointer  :: opsDat17Local
  integer(4) :: opsDat17Cardinality
  integer(4), pointer, dimension(:) :: dat17_size
  integer(4) :: dat17_base
  integer(4) :: xdim17
  integer(4) :: ydim17, zdim17


  integer(4) :: x_size, y_size, z_size
  integer(4), dimension(3) :: start_indx, end_indx
  integer(4) :: n
  integer(4) :: i10
  integer(4) :: i20
  integer(4) :: blocksPerGrid
  integer(4) :: nshared
  integer(4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type(ops_arg), dimension(17) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5
  opsArgArray(6) = opsArg6
  opsArgArray(7) = opsArg7
  opsArgArray(8) = opsArg8
  opsArgArray(9) = opsArg9
  opsArgArray(10) = opsArg10
  opsArgArray(11) = opsArg11
  opsArgArray(12) = opsArg12
  opsArgArray(13) = opsArg13
  opsArgArray(14) = opsArg14
  opsArgArray(15) = opsArg15
  opsArgArray(16) = opsArg16
  opsArgArray(17) = opsArg17

  call setKernelTime(369,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start_indx, end_indx, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start_indx(n) = range(2*n-1)
    end_indx(n)   = range(2*n)
  END DO
#endif


  x_size = MAX(0,end_indx(1)-start_indx(1)+1)
  y_size = MAX(0,end_indx(2)-start_indx(2)+1)
  z_size = MAX(0,end_indx(3)-start_indx(3)+1)

  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start_indx,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start_indx,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg3),dat3_size,(/dim/))
  xdim3 = dat3_size(1)
  ydim3 = dat3_size(2)
  zdim3 = dat3_size(3)
  opsDat3Cardinality = opsArg3%dim * xdim3 * ydim3 * zdim3
  dat3_base = getDatBaseFromOpsArg3D(opsArg3,start_indx,1)
  call c_f_pointer(opsArg3%data_d,opsDat3Local,(/opsDat3Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg4),dat4_size,(/dim/))
  xdim4 = dat4_size(1)
  ydim4 = dat4_size(2)
  zdim4 = dat4_size(3)
  opsDat4Cardinality = opsArg4%dim * xdim4 * ydim4 * zdim4
  dat4_base = getDatBaseFromOpsArg3D(opsArg4,start_indx,1)
  call c_f_pointer(opsArg4%data_d,opsDat4Local,(/opsDat4Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg5),dat5_size,(/dim/))
  xdim5 = dat5_size(1)
  ydim5 = dat5_size(2)
  zdim5 = dat5_size(3)
  opsDat5Cardinality = opsArg5%dim * xdim5 * ydim5 * zdim5
  dat5_base = getDatBaseFromOpsArg3D(opsArg5,start_indx,1)
  call c_f_pointer(opsArg5%data_d,opsDat5Local,(/opsDat5Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg6),dat6_size,(/dim/))
  xdim6 = dat6_size(1)
  ydim6 = dat6_size(2)
  zdim6 = dat6_size(3)
  opsDat6Cardinality = opsArg6%dim * xdim6 * ydim6 * zdim6
  dat6_base = getDatBaseFromOpsArg3D(opsArg6,start_indx,1)
  call c_f_pointer(opsArg6%data_d,opsDat6Local,(/opsDat6Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg7),dat7_size,(/dim/))
  xdim7 = dat7_size(1)
  ydim7 = dat7_size(2)
  zdim7 = dat7_size(3)
  opsDat7Cardinality = opsArg7%dim * xdim7 * ydim7 * zdim7
  dat7_base = getDatBaseFromOpsArg3D(opsArg7,start_indx,1)
  call c_f_pointer(opsArg7%data_d,opsDat7Local,(/opsDat7Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg8),dat8_size,(/dim/))
  xdim8 = dat8_size(1)
  ydim8 = dat8_size(2)
  zdim8 = dat8_size(3)
  opsDat8Cardinality = opsArg8%dim * xdim8 * ydim8 * zdim8
  dat8_base = getDatBaseFromOpsArg3D(opsArg8,start_indx,1)
  call c_f_pointer(opsArg8%data_d,opsDat8Local,(/opsDat8Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg9),dat9_size,(/dim/))
  xdim9 = dat9_size(1)
  ydim9 = dat9_size(2)
  zdim9 = dat9_size(3)
  opsDat9Cardinality = opsArg9%dim * xdim9 * ydim9 * zdim9
  dat9_base = getDatBaseFromOpsArg3D(opsArg9,start_indx,1)
  call c_f_pointer(opsArg9%data_d,opsDat9Local,(/opsDat9Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg10),dat10_size,(/dim/))
  xdim10 = dat10_size(1)
  ydim10 = dat10_size(2)
  zdim10 = dat10_size(3)
  opsDat10Cardinality = opsArg10%dim * xdim10 * ydim10 * zdim10
  dat10_base = getDatBaseFromOpsArg3D(opsArg10,start_indx,1)
  call c_f_pointer(opsArg10%data_d,opsDat10Local,(/opsDat10Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg11),dat11_size,(/dim/))
  xdim11 = dat11_size(1)
  ydim11 = dat11_size(2)
  zdim11 = dat11_size(3)
  opsDat11Cardinality = opsArg11%dim * xdim11 * ydim11 * zdim11
  dat11_base = getDatBaseFromOpsArg3D(opsArg11,start_indx,1)
  call c_f_pointer(opsArg11%data_d,opsDat11Local,(/opsDat11Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg12),dat12_size,(/dim/))
  xdim12 = dat12_size(1)
  ydim12 = dat12_size(2)
  zdim12 = dat12_size(3)
  opsDat12Cardinality = opsArg12%dim * xdim12 * ydim12 * zdim12
  dat12_base = getDatBaseFromOpsArg3D(opsArg12,start_indx,1)
  call c_f_pointer(opsArg12%data_d,opsDat12Local,(/opsDat12Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg13),dat13_size,(/dim/))
  xdim13 = dat13_size(1)
  ydim13 = dat13_size(2)
  zdim13 = dat13_size(3)
  opsDat13Cardinality = opsArg13%dim * xdim13 * ydim13 * zdim13
  dat13_base = getDatBaseFromOpsArg3D(opsArg13,start_indx,1)
  call c_f_pointer(opsArg13%data_d,opsDat13Local,(/opsDat13Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg14),dat14_size,(/dim/))
  xdim14 = dat14_size(1)
  ydim14 = dat14_size(2)
  zdim14 = dat14_size(3)
  opsDat14Cardinality = opsArg14%dim * xdim14 * ydim14 * zdim14
  dat14_base = getDatBaseFromOpsArg3D(opsArg14,start_indx,1)
  call c_f_pointer(opsArg14%data_d,opsDat14Local,(/opsDat14Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg15),dat15_size,(/dim/))
  xdim15 = dat15_size(1)
  ydim15 = dat15_size(2)
  zdim15 = dat15_size(3)
  opsDat15Cardinality = opsArg15%dim * xdim15 * ydim15 * zdim15
  dat15_base = getDatBaseFromOpsArg3D(opsArg15,start_indx,1)
  call c_f_pointer(opsArg15%data_d,opsDat15Local,(/opsDat15Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg16),dat16_size,(/dim/))
  xdim16 = dat16_size(1)
  ydim16 = dat16_size(2)
  zdim16 = dat16_size(3)
  opsDat16Cardinality = opsArg16%dim * xdim16 * ydim16 * zdim16
  dat16_base = getDatBaseFromOpsArg3D(opsArg16,start_indx,1)
  call c_f_pointer(opsArg16%data_d,opsDat16Local,(/opsDat16Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg17),dat17_size,(/dim/))
  xdim17 = dat17_size(1)
  ydim17 = dat17_size(2)
  zdim17 = dat17_size(3)
  opsDat17Cardinality = opsArg17%dim * xdim17 * ydim17 * zdim17
  dat17_base = getDatBaseFromOpsArg3D(opsArg17,start_indx,1)
  call c_f_pointer(opsArg17%data_d,opsDat17Local,(/opsDat17Cardinality/))

  IF ((xdim1 .NE. xdim1_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim1 .NE. ydim1_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim2 .NE. xdim2_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim2 .NE. ydim2_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim3 .NE. xdim3_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim3 .NE. ydim3_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim4 .NE. xdim4_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim4 .NE. ydim4_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim5 .NE. xdim5_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim5 .NE. ydim5_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim6 .NE. xdim6_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim6 .NE. ydim6_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim7 .NE. xdim7_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim7 .NE. ydim7_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim8 .NE. xdim8_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim8 .NE. ydim8_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim9 .NE. xdim9_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim9 .NE. ydim9_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim10 .NE. xdim10_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim10 .NE. ydim10_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim11 .NE. xdim11_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim11 .NE. ydim11_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim12 .NE. xdim12_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim12 .NE. ydim12_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim13 .NE. xdim13_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim13 .NE. ydim13_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim14 .NE. xdim14_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim14 .NE. ydim14_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim15 .NE. xdim15_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim15 .NE. ydim15_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim16 .NE. xdim16_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim16 .NE. ydim16_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (xdim17 .NE. xdim17_bounds_kernel_wallBC2_computeL_xr_h) .OR. &
  (ydim17 .NE. ydim17_bounds_kernel_wallBC2_computeL_xr_h) ) THEN
    xdim1_bounds_kernel_wallBC2_computeL_xr = xdim1
    xdim1_bounds_kernel_wallBC2_computeL_xr_h = xdim1
    ydim1_bounds_kernel_wallBC2_computeL_xr = ydim1
    ydim1_bounds_kernel_wallBC2_computeL_xr_h = ydim1
    xdim2_bounds_kernel_wallBC2_computeL_xr = xdim2
    xdim2_bounds_kernel_wallBC2_computeL_xr_h = xdim2
    ydim2_bounds_kernel_wallBC2_computeL_xr = ydim2
    ydim2_bounds_kernel_wallBC2_computeL_xr_h = ydim2
    xdim3_bounds_kernel_wallBC2_computeL_xr = xdim3
    xdim3_bounds_kernel_wallBC2_computeL_xr_h = xdim3
    ydim3_bounds_kernel_wallBC2_computeL_xr = ydim3
    ydim3_bounds_kernel_wallBC2_computeL_xr_h = ydim3
    xdim4_bounds_kernel_wallBC2_computeL_xr = xdim4
    xdim4_bounds_kernel_wallBC2_computeL_xr_h = xdim4
    ydim4_bounds_kernel_wallBC2_computeL_xr = ydim4
    ydim4_bounds_kernel_wallBC2_computeL_xr_h = ydim4
    xdim5_bounds_kernel_wallBC2_computeL_xr = xdim5
    xdim5_bounds_kernel_wallBC2_computeL_xr_h = xdim5
    ydim5_bounds_kernel_wallBC2_computeL_xr = ydim5
    ydim5_bounds_kernel_wallBC2_computeL_xr_h = ydim5
    xdim6_bounds_kernel_wallBC2_computeL_xr = xdim6
    xdim6_bounds_kernel_wallBC2_computeL_xr_h = xdim6
    ydim6_bounds_kernel_wallBC2_computeL_xr = ydim6
    ydim6_bounds_kernel_wallBC2_computeL_xr_h = ydim6
    xdim7_bounds_kernel_wallBC2_computeL_xr = xdim7
    xdim7_bounds_kernel_wallBC2_computeL_xr_h = xdim7
    ydim7_bounds_kernel_wallBC2_computeL_xr = ydim7
    ydim7_bounds_kernel_wallBC2_computeL_xr_h = ydim7
    xdim8_bounds_kernel_wallBC2_computeL_xr = xdim8
    xdim8_bounds_kernel_wallBC2_computeL_xr_h = xdim8
    ydim8_bounds_kernel_wallBC2_computeL_xr = ydim8
    ydim8_bounds_kernel_wallBC2_computeL_xr_h = ydim8
    xdim9_bounds_kernel_wallBC2_computeL_xr = xdim9
    xdim9_bounds_kernel_wallBC2_computeL_xr_h = xdim9
    ydim9_bounds_kernel_wallBC2_computeL_xr = ydim9
    ydim9_bounds_kernel_wallBC2_computeL_xr_h = ydim9
    xdim10_bounds_kernel_wallBC2_computeL_xr = xdim10
    xdim10_bounds_kernel_wallBC2_computeL_xr_h = xdim10
    ydim10_bounds_kernel_wallBC2_computeL_xr = ydim10
    ydim10_bounds_kernel_wallBC2_computeL_xr_h = ydim10
    xdim11_bounds_kernel_wallBC2_computeL_xr = xdim11
    xdim11_bounds_kernel_wallBC2_computeL_xr_h = xdim11
    ydim11_bounds_kernel_wallBC2_computeL_xr = ydim11
    ydim11_bounds_kernel_wallBC2_computeL_xr_h = ydim11
    xdim12_bounds_kernel_wallBC2_computeL_xr = xdim12
    xdim12_bounds_kernel_wallBC2_computeL_xr_h = xdim12
    ydim12_bounds_kernel_wallBC2_computeL_xr = ydim12
    ydim12_bounds_kernel_wallBC2_computeL_xr_h = ydim12
    xdim13_bounds_kernel_wallBC2_computeL_xr = xdim13
    xdim13_bounds_kernel_wallBC2_computeL_xr_h = xdim13
    ydim13_bounds_kernel_wallBC2_computeL_xr = ydim13
    ydim13_bounds_kernel_wallBC2_computeL_xr_h = ydim13
    xdim14_bounds_kernel_wallBC2_computeL_xr = xdim14
    xdim14_bounds_kernel_wallBC2_computeL_xr_h = xdim14
    ydim14_bounds_kernel_wallBC2_computeL_xr = ydim14
    ydim14_bounds_kernel_wallBC2_computeL_xr_h = ydim14
    xdim15_bounds_kernel_wallBC2_computeL_xr = xdim15
    xdim15_bounds_kernel_wallBC2_computeL_xr_h = xdim15
    ydim15_bounds_kernel_wallBC2_computeL_xr = ydim15
    ydim15_bounds_kernel_wallBC2_computeL_xr_h = ydim15
    xdim16_bounds_kernel_wallBC2_computeL_xr = xdim16
    xdim16_bounds_kernel_wallBC2_computeL_xr_h = xdim16
    ydim16_bounds_kernel_wallBC2_computeL_xr = ydim16
    ydim16_bounds_kernel_wallBC2_computeL_xr_h = ydim16
    xdim17_bounds_kernel_wallBC2_computeL_xr = xdim17
    xdim17_bounds_kernel_wallBC2_computeL_xr_h = xdim17
    ydim17_bounds_kernel_wallBC2_computeL_xr = ydim17
    ydim17_bounds_kernel_wallBC2_computeL_xr_h = ydim17
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)


  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,17)
  call ops_halo_exchanges(opsArgArray,17,range)
  call ops_H_D_exchanges_device(opsArgArray,17)

  call ops_timers_core(t2)

  call bounds_kernel_wallBC2_computeL_xr_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Local, &
  & opsDat4Local, &
  & opsDat5Local, &
  & opsDat6Local, &
  & opsDat7Local, &
  & opsDat8Local, &
  & opsDat9Local, &
  & opsDat10Local, &
  & opsDat11Local, &
  & opsDat12Local, &
  & opsDat13Local, &
  & opsDat14Local, &
  & opsDat15Local, &
  & opsDat16Local, &
  & opsDat17Local, &
  & dat1_base, &
  & dat2_base, &
  & dat3_base, &
  & dat4_base, &
  & dat5_base, &
  & dat6_base, &
  & dat7_base, &
  & dat8_base, &
  & dat9_base, &
  & dat10_base, &
  & dat11_base, &
  & dat12_base, &
  & dat13_base, &
  & dat14_base, &
  & dat15_base, &
  & dat16_base, &
  & dat17_base, &
  & x_size, y_size, z_size )

  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 17)
  call ops_set_halo_dirtybit3(opsArg1,range)
  call ops_set_halo_dirtybit3(opsArg2,range)
  call ops_set_halo_dirtybit3(opsArg3,range)
  call ops_set_halo_dirtybit3(opsArg4,range)
  call ops_set_halo_dirtybit3(opsArg5,range)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start_indx, end_indx, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg3,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg4,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg5,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg6,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg7,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg8,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg9,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg10,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg11,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg12,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg13,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg14,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg15,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg16,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg17,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(369,userSubroutine,t3-t2,t2-t1,transfer_total,0)

end subroutine

END MODULE
