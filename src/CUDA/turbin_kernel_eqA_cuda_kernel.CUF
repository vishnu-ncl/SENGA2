!
! auto-generated by ops_fortran.py
!
MODULE TURBIN_KERNEL_EQA_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: reductionArrayDevice7_turbin_kernel_eqA
INTEGER(KIND=4), constant :: xdim1_turbin_kernel_eqA
INTEGER(KIND=4):: xdim1_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: ydim1_turbin_kernel_eqA
INTEGER(KIND=4):: ydim1_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: zdim1_turbin_kernel_eqA
INTEGER(KIND=4):: zdim1_turbin_kernel_eqA_h  = -1
#define OPS_ACC1(x,y,z) (x+xdim1_turbin_kernel_eqA*(y)+xdim1_turbin_kernel_eqA*ydim1_turbin_kernel_eqA*(z)+1)
INTEGER(KIND=4), constant :: xdim2_turbin_kernel_eqA
INTEGER(KIND=4):: xdim2_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: ydim2_turbin_kernel_eqA
INTEGER(KIND=4):: ydim2_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: zdim2_turbin_kernel_eqA
INTEGER(KIND=4):: zdim2_turbin_kernel_eqA_h  = -1
#define OPS_ACC2(x,y,z) (x+xdim2_turbin_kernel_eqA*(y)+xdim2_turbin_kernel_eqA*ydim2_turbin_kernel_eqA*(z)+1)
INTEGER(KIND=4), constant :: xdim3_turbin_kernel_eqA
INTEGER(KIND=4):: xdim3_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: ydim3_turbin_kernel_eqA
INTEGER(KIND=4):: ydim3_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: zdim3_turbin_kernel_eqA
INTEGER(KIND=4):: zdim3_turbin_kernel_eqA_h  = -1
#define OPS_ACC3(x,y,z) (x+xdim3_turbin_kernel_eqA*(y)+xdim3_turbin_kernel_eqA*ydim3_turbin_kernel_eqA*(z)+1)
INTEGER(KIND=4), constant :: xdim4_turbin_kernel_eqA
INTEGER(KIND=4):: xdim4_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: ydim4_turbin_kernel_eqA
INTEGER(KIND=4):: ydim4_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: zdim4_turbin_kernel_eqA
INTEGER(KIND=4):: zdim4_turbin_kernel_eqA_h  = -1
#define OPS_ACC4(x,y,z) (x+xdim4_turbin_kernel_eqA*(y)+xdim4_turbin_kernel_eqA*ydim4_turbin_kernel_eqA*(z)+1)
INTEGER(KIND=4), constant :: xdim5_turbin_kernel_eqA
INTEGER(KIND=4):: xdim5_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: ydim5_turbin_kernel_eqA
INTEGER(KIND=4):: ydim5_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: zdim5_turbin_kernel_eqA
INTEGER(KIND=4):: zdim5_turbin_kernel_eqA_h  = -1
#define OPS_ACC5(x,y,z) (x+xdim5_turbin_kernel_eqA*(y)+xdim5_turbin_kernel_eqA*ydim5_turbin_kernel_eqA*(z)+1)
INTEGER(KIND=4), constant :: xdim6_turbin_kernel_eqA
INTEGER(KIND=4):: xdim6_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: ydim6_turbin_kernel_eqA
INTEGER(KIND=4):: ydim6_turbin_kernel_eqA_h  = -1
INTEGER(KIND=4), constant :: zdim6_turbin_kernel_eqA
INTEGER(KIND=4):: zdim6_turbin_kernel_eqA_h  = -1
#define OPS_ACC6(x,y,z) (x+xdim6_turbin_kernel_eqA*(y)+xdim6_turbin_kernel_eqA*ydim6_turbin_kernel_eqA*(z)+1)


contains

!Reduction cuda kernel
attributes (device) SUBROUTINE ReductionFloat8(sharedDouble8, reductionResult,inputValue,reductionOperation)
  REAL(kind=8), DIMENSION(:), DEVICE :: reductionResult
  REAL(kind=8) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  REAL(kind=8), DIMENSION(0:*) :: sharedDouble8
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: threadID
  threadID = (threadIdx%y-1)*blockDim%x + (threadIdx%x - 1)
  i1 = ishft(blockDim%x*blockDim%y,-1)
  CALL syncthreads()
  sharedDouble8(threadID) = inputValue
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      SELECT CASE(reductionOperation)
      CASE (0)
      sharedDouble8(threadID) = sharedDouble8(threadID) + sharedDouble8(threadID + i1)
      CASE (1)
      IF (sharedDouble8(threadID + i1) < sharedDouble8(threadID)) THEN
        sharedDouble8(threadID) = sharedDouble8(threadID + i1)
      ENDIF
      CASE (2)
      IF (sharedDouble8(threadID + i1) > sharedDouble8(threadID)) THEN
        sharedDouble8(threadID) = sharedDouble8(threadID + i1)
      ENDIF
      END SELECT
    ENDIF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    SELECT CASE(reductionOperation)
    CASE (0)
    reductionResult(1) = reductionResult(1) + sharedDouble8(0)
    CASE (1)
    IF (sharedDouble8(0) < reductionResult(1)) THEN
      reductionResult(1) = sharedDouble8(0)
    ENDIF
    CASE (2)
    IF (sharedDouble8(0) > reductionResult(1)) THEN
      reductionResult(1) = sharedDouble8(0)
    ENDIF
    END SELECT
  ENDIF
  CALL syncthreads()
  END SUBROUTINE

  attributes (device) SUBROUTINE ReductionInt4(sharedInt4, reductionResult,inputValue,reductionOperation)
  INTEGER(kind=4), DIMENSION(:), DEVICE :: reductionResult
  INTEGER(kind=4) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  INTEGER(kind=4), DIMENSION(0:*) :: sharedInt4
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: threadID
  threadID = (threadIdx%y-1)*blockDim%x + (threadIdx%x - 1)
  i1 = ishft(blockDim%x*blockDim%y,-1)
  CALL syncthreads()
  sharedInt4(threadID) = inputValue
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      SELECT CASE(reductionOperation)
      CASE (0)
      sharedInt4(threadID) = sharedInt4(threadID) + sharedInt4(threadID + i1)
      CASE (1)
      IF (sharedInt4(threadID + i1) < sharedInt4(threadID)) THEN
        sharedInt4(threadID) = sharedInt4(threadID + i1)
      ENDIF
      CASE (2)
      IF (sharedInt4(threadID + i1) > sharedInt4(threadID)) THEN
        sharedInt4(threadID) = sharedInt4(threadID + i1)
      ENDIF
      END SELECT
    ENDIF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    SELECT CASE(reductionOperation)
    CASE (0)
    reductionResult(1) = reductionResult(1) + sharedInt4(0)
    CASE (1)
    IF (sharedInt4(0) < reductionResult(1)) THEN
      reductionResult(1) = sharedInt4(0)
    ENDIF
    CASE (2)
    IF (sharedInt4(0) > reductionResult(1)) THEN
      reductionResult(1) = sharedInt4(0)
    ENDIF
    END SELECT
  ENDIF
  CALL syncthreads()
END SUBROUTINE

!user function
attributes (device) SUBROUTINE turbin_kernel_eqa_gpu(urun, utmp, vrun, vtmp, wrun, wtmp, tket)
    use data_types
    implicit none

    real(kind=8), dimension(1), intent(in) :: urun, utmp, vrun, vtmp, wrun, wtmp
    real(kind=8) :: tket

    tket = tket + urun(OPS_ACC1(0,0,0))*urun(OPS_ACC1(0,0,0))  &
          + utmp(OPS_ACC2(0,0,0))*utmp(OPS_ACC2(0,0,0)) + vrun(OPS_ACC3(0,0,0))*vrun(OPS_ACC3(0,0,0))  &
          + vtmp(OPS_ACC4(0,0,0))*vtmp(OPS_ACC4(0,0,0)) + wrun(OPS_ACC5(0,0,0))*wrun(OPS_ACC5(0,0,0))  &
          + wtmp(OPS_ACC6(0,0,0))*wtmp(OPS_ACC6(0,0,0))

END SUBROUTINE

#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4
#undef OPS_ACC5
#undef OPS_ACC6



!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine turbin_kernel_eqA_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsDat3Local, &
& opsDat4Local, &
& opsDat5Local, &
& opsDat6Local, &
& reductionArrayDevice7,   &
& dat1_base, &
& dat2_base, &
& dat3_base, &
& dat4_base, &
& dat5_base, &
& dat6_base, &
& size1, size2, size3 )
  IMPLICIT NONE
  real(8), DEVICE, INTENT(IN) :: opsDat1Local(*)
  integer(4) arg1
  real(8), DEVICE, INTENT(IN) :: opsDat2Local(*)
  integer(4) arg2
  real(8), DEVICE, INTENT(IN) :: opsDat3Local(*)
  integer(4) arg3
  real(8), DEVICE, INTENT(IN) :: opsDat4Local(*)
  integer(4) arg4
  real(8), DEVICE, INTENT(IN) :: opsDat5Local(*)
  integer(4) arg5
  real(8), DEVICE, INTENT(IN) :: opsDat6Local(*)
  integer(4) arg6
  real(8), DIMENSION(:), DEVICE :: reductionArrayDevice7
  real(8) :: opsGblDat7Device
  real(8), DIMENSION(0:*), SHARED :: sharedMem
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4), value :: dat3_base
  integer(4), value :: dat4_base
  integer(4), value :: dat5_base
  integer(4), value :: dat6_base
  integer(4) start(3)
  integer(4) end(3)
  integer, value :: size1,size2,size3
  integer n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  arg1 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_turbin_kernel_eqA + (n_z-1) * 1*1 * xdim1_turbin_kernel_eqA * ydim1_turbin_kernel_eqA
  arg2 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_turbin_kernel_eqA + (n_z-1) * 1*1 * xdim2_turbin_kernel_eqA * ydim2_turbin_kernel_eqA
  arg3 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim3_turbin_kernel_eqA + (n_z-1) * 1*1 * xdim3_turbin_kernel_eqA * ydim3_turbin_kernel_eqA
  arg4 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim4_turbin_kernel_eqA + (n_z-1) * 1*1 * xdim4_turbin_kernel_eqA * ydim4_turbin_kernel_eqA
  arg5 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim5_turbin_kernel_eqA + (n_z-1) * 1*1 * xdim5_turbin_kernel_eqA * ydim5_turbin_kernel_eqA
  arg6 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim6_turbin_kernel_eqA + (n_z-1) * 1*1 * xdim6_turbin_kernel_eqA * ydim6_turbin_kernel_eqA
  opsGblDat7Device = 0.0_8
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN
    call turbin_kernel_eqA_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsDat3Local(dat3_base+arg3), &
    & opsDat4Local(dat4_base+arg4), &
    & opsDat5Local(dat5_base+arg5), &
    & opsDat6Local(dat6_base+arg6), &
    & opsGblDat7Device )

  ENDIF

  call ReductionFloat8(sharedMem, reductionArrayDevice7((blockIdx%z - 1)*gridDim%y*gridDim%x + (blockIdx%y - 1)*gridDim%x + (blockIdx%x-1) + 1:),opsGblDat7Device,0)

end subroutine

!host subroutine
attributes (host) subroutine turbin_kernel_eqA_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5, &
& opsArg6, &
& opsArg7)
  use cudafor
  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( ops_block ), INTENT(IN) :: block
  integer(kind=4), INTENT(IN):: dim
  integer(kind=4)   , DIMENSION(2*dim), INTENT(IN) :: range
  real(kind=8) t1,t2,t3
  real(kind=4) transfer_total, transfer
  integer(kind=4) :: istat

  type ( ops_arg )  , INTENT(IN) :: opsArg1
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat1Local
  integer(kind=4) :: opsDat1Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat1_size
  integer(kind=4) :: dat1_base
  INTEGER(KIND=4) :: xdim1
  INTEGER(KIND=4) :: ydim1, zdim1

  type ( ops_arg )  , INTENT(IN) :: opsArg2
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat2Local
  integer(kind=4) :: opsDat2Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat2_size
  integer(kind=4) :: dat2_base
  INTEGER(KIND=4) :: xdim2
  INTEGER(KIND=4) :: ydim2, zdim2

  type ( ops_arg )  , INTENT(IN) :: opsArg3
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat3Local
  integer(kind=4) :: opsDat3Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat3_size
  integer(kind=4) :: dat3_base
  INTEGER(KIND=4) :: xdim3
  INTEGER(KIND=4) :: ydim3, zdim3

  type ( ops_arg )  , INTENT(IN) :: opsArg4
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat4Local
  integer(kind=4) :: opsDat4Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat4_size
  integer(kind=4) :: dat4_base
  INTEGER(KIND=4) :: xdim4
  INTEGER(KIND=4) :: ydim4, zdim4

  type ( ops_arg )  , INTENT(IN) :: opsArg5
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat5Local
  integer(kind=4) :: opsDat5Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat5_size
  integer(kind=4) :: dat5_base
  INTEGER(KIND=4) :: xdim5
  INTEGER(KIND=4) :: ydim5, zdim5

  type ( ops_arg )  , INTENT(IN) :: opsArg6
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat6Local
  integer(kind=4) :: opsDat6Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat6_size
  integer(kind=4) :: dat6_base
  INTEGER(KIND=4) :: xdim6
  INTEGER(KIND=4) :: ydim6, zdim6

  type ( ops_arg )  , INTENT(IN) :: opsArg7
  integer(kind=4) :: opsDat7Cardinality
  real(8), DIMENSION(:), POINTER :: opsDat7Host
  real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost7
  INTEGER(kind=4) :: reductionCardinality7

  integer x_size, y_size, z_size
  integer start(3)
  integer end(3)
  integer(kind=4) :: n
  integer(kind=4) :: i10
  integer(kind=4) :: i20
  integer(kind=4) :: blocksPerGrid
  integer(kind=4) :: nshared
  integer(kind=4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type ( ops_arg ) , DIMENSION(7) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5
  opsArgArray(6) = opsArg6
  opsArgArray(7) = opsArg7

  call setKernelTime(531,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start, end, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start(n) = range(2*n-1)
    end(n) = range(2*n)
  END DO
#endif


  x_size = MAX(0,end(1)-start(1)+1)
  y_size = MAX(0,end(2)-start(2)+1)
  z_size = MAX(0,end(3)-start(3)+1)

  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg3),dat3_size,(/dim/))
  xdim3 = dat3_size(1)
  ydim3 = dat3_size(2)
  zdim3 = dat3_size(3)
  opsDat3Cardinality = opsArg3%dim * xdim3 * ydim3 * zdim3
  dat3_base = getDatBaseFromOpsArg3D(opsArg3,start,1)
  call c_f_pointer(opsArg3%data_d,opsDat3Local,(/opsDat3Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg4),dat4_size,(/dim/))
  xdim4 = dat4_size(1)
  ydim4 = dat4_size(2)
  zdim4 = dat4_size(3)
  opsDat4Cardinality = opsArg4%dim * xdim4 * ydim4 * zdim4
  dat4_base = getDatBaseFromOpsArg3D(opsArg4,start,1)
  call c_f_pointer(opsArg4%data_d,opsDat4Local,(/opsDat4Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg5),dat5_size,(/dim/))
  xdim5 = dat5_size(1)
  ydim5 = dat5_size(2)
  zdim5 = dat5_size(3)
  opsDat5Cardinality = opsArg5%dim * xdim5 * ydim5 * zdim5
  dat5_base = getDatBaseFromOpsArg3D(opsArg5,start,1)
  call c_f_pointer(opsArg5%data_d,opsDat5Local,(/opsDat5Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg6),dat6_size,(/dim/))
  xdim6 = dat6_size(1)
  ydim6 = dat6_size(2)
  zdim6 = dat6_size(3)
  opsDat6Cardinality = opsArg6%dim * xdim6 * ydim6 * zdim6
  dat6_base = getDatBaseFromOpsArg3D(opsArg6,start,1)
  call c_f_pointer(opsArg6%data_d,opsDat6Local,(/opsDat6Cardinality/))

  opsDat7Cardinality = opsArg7%dim
  call c_f_pointer(getReductionPtrFromOpsArg(opsArg7,block),opsDat7Host,(/opsDat7Cardinality/))

  IF ((xdim1 .NE. xdim1_turbin_kernel_eqA_h) .OR. &
  (ydim1 .NE. ydim1_turbin_kernel_eqA_h) .OR. &
  (xdim2 .NE. xdim2_turbin_kernel_eqA_h) .OR. &
  (ydim2 .NE. ydim2_turbin_kernel_eqA_h) .OR. &
  (xdim3 .NE. xdim3_turbin_kernel_eqA_h) .OR. &
  (ydim3 .NE. ydim3_turbin_kernel_eqA_h) .OR. &
  (xdim4 .NE. xdim4_turbin_kernel_eqA_h) .OR. &
  (ydim4 .NE. ydim4_turbin_kernel_eqA_h) .OR. &
  (xdim5 .NE. xdim5_turbin_kernel_eqA_h) .OR. &
  (ydim5 .NE. ydim5_turbin_kernel_eqA_h) .OR. &
  (xdim6 .NE. xdim6_turbin_kernel_eqA_h) .OR. &
  (ydim6 .NE. ydim6_turbin_kernel_eqA_h) ) THEN
    xdim1_turbin_kernel_eqA = xdim1
    xdim1_turbin_kernel_eqA_h = xdim1
    ydim1_turbin_kernel_eqA = ydim1
    ydim1_turbin_kernel_eqA_h = ydim1
    xdim2_turbin_kernel_eqA = xdim2
    xdim2_turbin_kernel_eqA_h = xdim2
    ydim2_turbin_kernel_eqA = ydim2
    ydim2_turbin_kernel_eqA_h = ydim2
    xdim3_turbin_kernel_eqA = xdim3
    xdim3_turbin_kernel_eqA_h = xdim3
    ydim3_turbin_kernel_eqA = ydim3
    ydim3_turbin_kernel_eqA_h = ydim3
    xdim4_turbin_kernel_eqA = xdim4
    xdim4_turbin_kernel_eqA_h = xdim4
    ydim4_turbin_kernel_eqA = ydim4
    ydim4_turbin_kernel_eqA_h = ydim4
    xdim5_turbin_kernel_eqA = xdim5
    xdim5_turbin_kernel_eqA_h = xdim5
    ydim5_turbin_kernel_eqA = ydim5
    ydim5_turbin_kernel_eqA_h = ydim5
    xdim6_turbin_kernel_eqA = xdim6
    xdim6_turbin_kernel_eqA_h = xdim6
    ydim6_turbin_kernel_eqA = ydim6
    ydim6_turbin_kernel_eqA_h = ydim6
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)

  !Reduction vars and shared memory for reductions
  nshared = 0
  nthread = getOPS_block_size_x()*getOPS_block_size_y()
  blocksPerGrid = ((x_size-1)/getOPS_block_size_x()+ 1)*((y_size-1)/getOPS_block_size_y() + 1)* z_size

  nshared = MAX(nshared,8*1*nthread)

  reductionCardinality7 = blocksPerGrid * 1
  allocate( reductionArrayHost7(reductionCardinality7* (1)) )
  IF (.not. allocated(reductionArrayDevice7_turbin_kernel_eqA)) THEN
    allocate( reductionArrayDevice7_turbin_kernel_eqA(reductionCardinality7* (1)) )
  ENDIF

  DO i10 = 0, reductionCardinality7-1
    reductionArrayHost7(i10+1) = 0.0
  END DO

  reductionArrayDevice7_turbin_kernel_eqA = reductionArrayHost7

  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,7)
  call ops_halo_exchanges(opsArgArray,7,range)
  call ops_H_D_exchanges_device(opsArgArray,7)

  call ops_timers_core(t2)
  call turbin_kernel_eqA_wrap <<<grid,tblock,nshared>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Local, &
  & opsDat4Local, &
  & opsDat5Local, &
  & opsDat6Local, &
  & reductionArrayDevice7_turbin_kernel_eqA, &
  & dat1_base, &
  & dat2_base, &
  & dat3_base, &
  & dat4_base, &
  & dat5_base, &
  & dat6_base, &
  & x_size, y_size, z_size )

  reductionArrayHost7 = reductionArrayDevice7_turbin_kernel_eqA

  DO i10 = 0, reductionCardinality7-1
    opsDat7Host = opsDat7Host + reductionArrayHost7(i10+1)
  END DO

  deallocate( reductionArrayHost7 )
  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 7)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start, end, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg3,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg4,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg5,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg6,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(531,userSubroutine,t3-t2,t2-t1,transfer_total,0)
end subroutine
END MODULE
