!
! auto-generated by ops_fortran.py
!

MODULE TEMPER_KERNEL_EQD_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

integer(4), constant :: xdim1_temper_kernel_eqD
integer(4):: xdim1_temper_kernel_eqD_h  = -1
integer(4), constant :: ydim1_temper_kernel_eqD
integer(4):: ydim1_temper_kernel_eqD_h  = -1
#define OPS_ACC1(x,y,z) (x+xdim1_temper_kernel_eqD*(y)+xdim1_temper_kernel_eqD*ydim1_temper_kernel_eqD*(z)+1)



integer(4), constant :: xdim4_temper_kernel_eqD
integer(4):: xdim4_temper_kernel_eqD_h  = -1
integer(4), constant :: ydim4_temper_kernel_eqD
integer(4):: ydim4_temper_kernel_eqD_h  = -1
#define OPS_ACC4(x,y,z) (x+xdim4_temper_kernel_eqD*(y)+xdim4_temper_kernel_eqD*ydim4_temper_kernel_eqD*(z)+1)

integer(4), constant :: xdim5_temper_kernel_eqD
integer(4):: xdim5_temper_kernel_eqD_h  = -1
integer(4), constant :: ydim5_temper_kernel_eqD
integer(4):: ydim5_temper_kernel_eqD_h  = -1
#define OPS_ACC5(x,y,z) (x+xdim5_temper_kernel_eqD*(y)+xdim5_temper_kernel_eqD*ydim5_temper_kernel_eqD*(z)+1)

integer(4), constant :: xdim6_temper_kernel_eqD
integer(4):: xdim6_temper_kernel_eqD_h  = -1
integer(4), constant :: ydim6_temper_kernel_eqD
integer(4):: ydim6_temper_kernel_eqD_h  = -1
#define OPS_ACC6(x,y,z) (x+xdim6_temper_kernel_eqD*(y)+xdim6_temper_kernel_eqD*ydim6_temper_kernel_eqD*(z)+1)

integer(4), constant :: xdim7_temper_kernel_eqD
integer(4):: xdim7_temper_kernel_eqD_h  = -1
integer(4), constant :: ydim7_temper_kernel_eqD
integer(4):: ydim7_temper_kernel_eqD_h  = -1
#define OPS_ACC7(x,y,z) (x+xdim7_temper_kernel_eqD*(y)+xdim7_temper_kernel_eqD*ydim7_temper_kernel_eqD*(z)+1)

integer(4), constant :: xdim8_temper_kernel_eqD
integer(4):: xdim8_temper_kernel_eqD_h  = -1
integer(4), constant :: ydim8_temper_kernel_eqD
integer(4):: ydim8_temper_kernel_eqD_h  = -1
#define OPS_ACC8(x,y,z) (x+xdim8_temper_kernel_eqD*(y)+xdim8_temper_kernel_eqD*ydim8_temper_kernel_eqD*(z)+1)


integer(4), constant :: xdim2_temper_kernel_eqD
integer(4):: xdim2_temper_kernel_eqD_h  = -1
integer(KIND=4), constant :: ydim2_temper_kernel_eqD
integer(KIND=4):: ydim2_temper_kernel_eqD_h  = -1
#define OPS_ACC_MD2(d,x,y,z) ((x)*6+(d)+(xdim2_temper_kernel_eqD*(y)*6)+(xdim2_temper_kernel_eqD*ydim2_temper_kernel_eqD*(z)*6))

integer(4), constant :: xdim3_temper_kernel_eqD
integer(4):: xdim3_temper_kernel_eqD_h  = -1
integer(KIND=4), constant :: ydim3_temper_kernel_eqD
integer(KIND=4):: ydim3_temper_kernel_eqD_h  = -1
#define OPS_ACC_MD3(d,x,y,z) ((x)*5+(d)+(xdim3_temper_kernel_eqD*(y)*5)+(xdim3_temper_kernel_eqD*ydim3_temper_kernel_eqD*(z)*5))






contains

!user function
attributes (device) SUBROUTINE temper_kernel_eqd_gpu(trun, tcoeff, tderiv, drhs, urhs, vrhs, wrhs, erhs, idx)
    use data_types
    implicit none

    real(kind=8), dimension(1), intent(in) :: tcoeff, tderiv, drhs, urhs, vrhs, wrhs, erhs
    real(kind=8), dimension(1) :: trun
    integer(kind=4), dimension(3), intent(in) :: idx


    real(kind=8), parameter :: toltmp=1.0E-10
    integer(kind=4), parameter :: ntitrs=100


    real(kind=8) :: tempor,tfpoly,tdpoly,deltmp
    integer(kind=4) :: ititrs,icp, ic,jc,kc

    ic = idx(1)
    jc = idx(2)
    kc = idx(3)

    tempor = trun(OPS_ACC1(0,0,0))
    ititrs = 1

    tfpoly = tcoeff(OPS_ACC_MD2(nctmax_opsconstant+1,0,0,0))
    tdpoly = tderiv(OPS_ACC_MD3(nctmax_opsconstant,0,0,0))

    DO icp = nctmm1_opsconstant,1,-1
        tfpoly = tcoeff(OPS_ACC_MD2(icp+1,0,0,0)) + tfpoly*tempor
        tdpoly = tderiv(OPS_ACC_MD3(icp,0,0,0))   + tdpoly*tempor
    END DO

    tfpoly = tcoeff(OPS_ACC_MD2(1,0,0,0)) + tfpoly*tempor

    deltmp = -tfpoly/tdpoly

    DO WHILE (ABS(deltmp) > toltmp)
        IF (ititrs < ntitrs) THEN
            tempor = tempor + deltmp
            ititrs = ititrs + 1

            tfpoly = tcoeff(OPS_ACC_MD2(nctmax_opsconstant+1,0,0,0))
            tdpoly = tderiv(OPS_ACC_MD3(nctmax_opsconstant,0,0,0))

            DO icp = nctmm1_opsconstant,1,-1
                tfpoly = tcoeff(OPS_ACC_MD2(icp+1,0,0,0)) + tfpoly*tempor
                tdpoly = tderiv(OPS_ACC_MD3(icp,0,0,0))   + tdpoly*tempor
            END DO

            tfpoly = tcoeff(OPS_ACC_MD2(1,0,0,0)) + tfpoly*tempor

            deltmp = -tfpoly/tdpoly

        ELSE
            print *,'Fatal: TEMPER: T iteration failed to converge'

            print *,'at point:',ic,jc,kc
            print *,'with values:',tempor,deltmp
            print *,drhs(OPS_ACC4(0,0,0))
            print *,urhs(OPS_ACC5(0,0,0))
            print *,vrhs(OPS_ACC6(0,0,0))
            print *,wrhs(OPS_ACC7(0,0,0))
            print *,erhs(OPS_ACC8(0,0,0))
            STOP
        END IF
    END DO


    trun(OPS_ACC1(0,0,0)) = tempor

END SUBROUTINE

#undef OPS_ACC1
#undef OPS_ACC4
#undef OPS_ACC5
#undef OPS_ACC6
#undef OPS_ACC7
#undef OPS_ACC8
#undef OPS_ACC_MD2
#undef OPS_ACC_MD3


!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine temper_kernel_eqD_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsDat3Local, &
& opsDat4Local, &
& opsDat5Local, &
& opsDat6Local, &
& opsDat7Local, &
& opsDat8Local, &
& idx, &
& dat1_base, &
& dat2_base, &
& dat3_base, &
& dat4_base, &
& dat5_base, &
& dat6_base, &
& dat7_base, &
& dat8_base, &
& size1, size2, size3 )

  IMPLICIT NONE

  real(kind=8), device, dimension(*), intent(inout) :: opsDat1Local(*)
  integer(4) :: arg1
  real(kind=8), device, dimension(*), intent(in)    :: opsDat2Local
  integer(4) :: arg2
  real(kind=8), device, dimension(*), intent(in)    :: opsDat3Local
  integer(4) :: arg3
  real(kind=8), device, dimension(*), intent(in)    :: opsDat4Local
  integer(4) :: arg4
  real(kind=8), device, dimension(*), intent(in)    :: opsDat5Local
  integer(4) :: arg5
  real(kind=8), device, dimension(*), intent(in)    :: opsDat6Local
  integer(4) :: arg6
  real(kind=8), device, dimension(*), intent(in)    :: opsDat7Local
  integer(4) :: arg7
  real(kind=8), device, dimension(*), intent(in)    :: opsDat8Local
  integer(4) :: arg8
  integer(4), dimension(3), intent(in) :: idx
  integer(4), dimension(3)             :: idx_local
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4), value :: dat3_base
  integer(4), value :: dat4_base
  integer(4), value :: dat5_base
  integer(4), value :: dat6_base
  integer(4), value :: dat7_base
  integer(4), value :: dat8_base
  integer(4), value :: size1, size2, size3
  integer(4)        :: n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  idx_local(1) = idx(1)+ n_x-1
  idx_local(2) = idx(2)+ n_y-1
  idx_local(3) = idx(3)+ n_z-1
  arg1 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_temper_kernel_eqD + (n_z-1) * 1*1 * xdim1_temper_kernel_eqD * ydim1_temper_kernel_eqD
  arg2 = (n_x-1) * 1*6 + (n_y-1) * 1*6 * xdim2_temper_kernel_eqD + (n_z-1) * 1*6 * xdim2_temper_kernel_eqD * ydim2_temper_kernel_eqD
  arg3 = (n_x-1) * 1*5 + (n_y-1) * 1*5 * xdim3_temper_kernel_eqD + (n_z-1) * 1*5 * xdim3_temper_kernel_eqD * ydim3_temper_kernel_eqD
  arg4 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim4_temper_kernel_eqD + (n_z-1) * 1*1 * xdim4_temper_kernel_eqD * ydim4_temper_kernel_eqD
  arg5 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim5_temper_kernel_eqD + (n_z-1) * 1*1 * xdim5_temper_kernel_eqD * ydim5_temper_kernel_eqD
  arg6 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim6_temper_kernel_eqD + (n_z-1) * 1*1 * xdim6_temper_kernel_eqD * ydim6_temper_kernel_eqD
  arg7 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim7_temper_kernel_eqD + (n_z-1) * 1*1 * xdim7_temper_kernel_eqD * ydim7_temper_kernel_eqD
  arg8 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim8_temper_kernel_eqD + (n_z-1) * 1*1 * xdim8_temper_kernel_eqD * ydim8_temper_kernel_eqD
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN

    call temper_kernel_eqD_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsDat3Local(dat3_base+arg3), &
    & opsDat4Local(dat4_base+arg4), &
    & opsDat5Local(dat5_base+arg5), &
    & opsDat6Local(dat6_base+arg6), &
    & opsDat7Local(dat7_base+arg7), &
    & opsDat8Local(dat8_base+arg8), &
    & idx_local )

  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine temper_kernel_eqD_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5, &
& opsArg6, &
& opsArg7, &
& opsArg8, &
& opsArg9)

  USE CUDAFOR
  IMPLICIT NONE

  character(kind=c_char,len=*), intent(in) :: userSubroutine
  type(ops_block), intent(in) :: block
  integer(4), intent(in):: dim
  integer(4), dimension(2*dim), intent(in) :: range
  real(8) :: t1,t2,t3
  real(4) :: transfer_total, transfer
  integer(4) :: istat

  type(ops_arg), intent(in) :: opsArg1
  real(kind=8), dimension(:), device, pointer  :: opsDat1Local
  integer(4) :: opsDat1Cardinality
  integer(4), pointer, dimension(:) :: dat1_size
  integer(4) :: dat1_base
  integer(4) :: xdim1
  integer(4) :: ydim1, zdim1

  type(ops_arg), intent(in) :: opsArg2
  real(kind=8), dimension(:), device, pointer  :: opsDat2Local
  integer(4) :: opsDat2Cardinality
  integer(4), pointer, dimension(:) :: dat2_size
  integer(4) :: dat2_base
  integer(4) :: xdim2
  integer(4) :: multi_d2
  integer(4) :: ydim2, zdim2

  type(ops_arg), intent(in) :: opsArg3
  real(kind=8), dimension(:), device, pointer  :: opsDat3Local
  integer(4) :: opsDat3Cardinality
  integer(4), pointer, dimension(:) :: dat3_size
  integer(4) :: dat3_base
  integer(4) :: xdim3
  integer(4) :: multi_d3
  integer(4) :: ydim3, zdim3

  type(ops_arg), intent(in) :: opsArg4
  real(kind=8), dimension(:), device, pointer  :: opsDat4Local
  integer(4) :: opsDat4Cardinality
  integer(4), pointer, dimension(:) :: dat4_size
  integer(4) :: dat4_base
  integer(4) :: xdim4
  integer(4) :: ydim4, zdim4

  type(ops_arg), intent(in) :: opsArg5
  real(kind=8), dimension(:), device, pointer  :: opsDat5Local
  integer(4) :: opsDat5Cardinality
  integer(4), pointer, dimension(:) :: dat5_size
  integer(4) :: dat5_base
  integer(4) :: xdim5
  integer(4) :: ydim5, zdim5

  type(ops_arg), intent(in) :: opsArg6
  real(kind=8), dimension(:), device, pointer  :: opsDat6Local
  integer(4) :: opsDat6Cardinality
  integer(4), pointer, dimension(:) :: dat6_size
  integer(4) :: dat6_base
  integer(4) :: xdim6
  integer(4) :: ydim6, zdim6

  type(ops_arg), intent(in) :: opsArg7
  real(kind=8), dimension(:), device, pointer  :: opsDat7Local
  integer(4) :: opsDat7Cardinality
  integer(4), pointer, dimension(:) :: dat7_size
  integer(4) :: dat7_base
  integer(4) :: xdim7
  integer(4) :: ydim7, zdim7

  type(ops_arg), intent(in) :: opsArg8
  real(kind=8), dimension(:), device, pointer  :: opsDat8Local
  integer(4) :: opsDat8Cardinality
  integer(4), pointer, dimension(:) :: dat8_size
  integer(4) :: dat8_base
  integer(4) :: xdim8
  integer(4) :: ydim8, zdim8

  type(ops_arg), intent(in) :: opsArg9


  integer(4) :: x_size, y_size, z_size
  integer(4), dimension(3) :: start_indx, end_indx
  integer(4), dimension(3), device :: idx
  integer(4), dimension(3)         :: idx_h
  integer(4) :: n
  integer(4) :: i10
  integer(4) :: i20
  integer(4) :: blocksPerGrid
  integer(4) :: nshared
  integer(4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type(ops_arg), dimension(9) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5
  opsArgArray(6) = opsArg6
  opsArgArray(7) = opsArg7
  opsArgArray(8) = opsArg8
  opsArgArray(9) = opsArg9

  call setKernelTime(529,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start_indx, end_indx, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start_indx(n) = range(2*n-1)
    end_indx(n)   = range(2*n)
  END DO
#endif

#ifdef OPS_MPI
  call getIdx(block,start_indx,idx_h)
  idx = idx_h
#else
  idx(1) = start_indx(1)
  idx(2) = start_indx(2)
  idx(3) = start_indx(3)
#endif


  x_size = MAX(0,end_indx(1)-start_indx(1)+1)
  y_size = MAX(0,end_indx(2)-start_indx(2)+1)
  z_size = MAX(0,end_indx(3)-start_indx(3)+1)

  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start_indx,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  multi_d2 = getDatDimFromOpsArg(opsArg2) ! dimension of the dat
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start_indx,multi_d2)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg3),dat3_size,(/dim/))
  xdim3 = dat3_size(1)
  ydim3 = dat3_size(2)
  zdim3 = dat3_size(3)
  opsDat3Cardinality = opsArg3%dim * xdim3 * ydim3 * zdim3
  multi_d3 = getDatDimFromOpsArg(opsArg3) ! dimension of the dat
  dat3_base = getDatBaseFromOpsArg3D(opsArg3,start_indx,multi_d3)
  call c_f_pointer(opsArg3%data_d,opsDat3Local,(/opsDat3Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg4),dat4_size,(/dim/))
  xdim4 = dat4_size(1)
  ydim4 = dat4_size(2)
  zdim4 = dat4_size(3)
  opsDat4Cardinality = opsArg4%dim * xdim4 * ydim4 * zdim4
  dat4_base = getDatBaseFromOpsArg3D(opsArg4,start_indx,1)
  call c_f_pointer(opsArg4%data_d,opsDat4Local,(/opsDat4Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg5),dat5_size,(/dim/))
  xdim5 = dat5_size(1)
  ydim5 = dat5_size(2)
  zdim5 = dat5_size(3)
  opsDat5Cardinality = opsArg5%dim * xdim5 * ydim5 * zdim5
  dat5_base = getDatBaseFromOpsArg3D(opsArg5,start_indx,1)
  call c_f_pointer(opsArg5%data_d,opsDat5Local,(/opsDat5Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg6),dat6_size,(/dim/))
  xdim6 = dat6_size(1)
  ydim6 = dat6_size(2)
  zdim6 = dat6_size(3)
  opsDat6Cardinality = opsArg6%dim * xdim6 * ydim6 * zdim6
  dat6_base = getDatBaseFromOpsArg3D(opsArg6,start_indx,1)
  call c_f_pointer(opsArg6%data_d,opsDat6Local,(/opsDat6Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg7),dat7_size,(/dim/))
  xdim7 = dat7_size(1)
  ydim7 = dat7_size(2)
  zdim7 = dat7_size(3)
  opsDat7Cardinality = opsArg7%dim * xdim7 * ydim7 * zdim7
  dat7_base = getDatBaseFromOpsArg3D(opsArg7,start_indx,1)
  call c_f_pointer(opsArg7%data_d,opsDat7Local,(/opsDat7Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg8),dat8_size,(/dim/))
  xdim8 = dat8_size(1)
  ydim8 = dat8_size(2)
  zdim8 = dat8_size(3)
  opsDat8Cardinality = opsArg8%dim * xdim8 * ydim8 * zdim8
  dat8_base = getDatBaseFromOpsArg3D(opsArg8,start_indx,1)
  call c_f_pointer(opsArg8%data_d,opsDat8Local,(/opsDat8Cardinality/))


  IF ((xdim1 .NE. xdim1_temper_kernel_eqD_h) .OR. &
  (ydim1 .NE. ydim1_temper_kernel_eqD_h) .OR. &
  (xdim2 .NE. xdim2_temper_kernel_eqD_h) .OR. &
  (ydim2 .NE. ydim2_temper_kernel_eqD_h) .OR. &
  (xdim3 .NE. xdim3_temper_kernel_eqD_h) .OR. &
  (ydim3 .NE. ydim3_temper_kernel_eqD_h) .OR. &
  (xdim4 .NE. xdim4_temper_kernel_eqD_h) .OR. &
  (ydim4 .NE. ydim4_temper_kernel_eqD_h) .OR. &
  (xdim5 .NE. xdim5_temper_kernel_eqD_h) .OR. &
  (ydim5 .NE. ydim5_temper_kernel_eqD_h) .OR. &
  (xdim6 .NE. xdim6_temper_kernel_eqD_h) .OR. &
  (ydim6 .NE. ydim6_temper_kernel_eqD_h) .OR. &
  (xdim7 .NE. xdim7_temper_kernel_eqD_h) .OR. &
  (ydim7 .NE. ydim7_temper_kernel_eqD_h) .OR. &
  (xdim8 .NE. xdim8_temper_kernel_eqD_h) .OR. &
  (ydim8 .NE. ydim8_temper_kernel_eqD_h) ) THEN
    xdim1_temper_kernel_eqD = xdim1
    xdim1_temper_kernel_eqD_h = xdim1
    ydim1_temper_kernel_eqD = ydim1
    ydim1_temper_kernel_eqD_h = ydim1
    xdim2_temper_kernel_eqD = xdim2
    xdim2_temper_kernel_eqD_h = xdim2
    ydim2_temper_kernel_eqD = ydim2
    ydim2_temper_kernel_eqD_h = ydim2
    xdim3_temper_kernel_eqD = xdim3
    xdim3_temper_kernel_eqD_h = xdim3
    ydim3_temper_kernel_eqD = ydim3
    ydim3_temper_kernel_eqD_h = ydim3
    xdim4_temper_kernel_eqD = xdim4
    xdim4_temper_kernel_eqD_h = xdim4
    ydim4_temper_kernel_eqD = ydim4
    ydim4_temper_kernel_eqD_h = ydim4
    xdim5_temper_kernel_eqD = xdim5
    xdim5_temper_kernel_eqD_h = xdim5
    ydim5_temper_kernel_eqD = ydim5
    ydim5_temper_kernel_eqD_h = ydim5
    xdim6_temper_kernel_eqD = xdim6
    xdim6_temper_kernel_eqD_h = xdim6
    ydim6_temper_kernel_eqD = ydim6
    ydim6_temper_kernel_eqD_h = ydim6
    xdim7_temper_kernel_eqD = xdim7
    xdim7_temper_kernel_eqD_h = xdim7
    ydim7_temper_kernel_eqD = ydim7
    ydim7_temper_kernel_eqD_h = ydim7
    xdim8_temper_kernel_eqD = xdim8
    xdim8_temper_kernel_eqD_h = xdim8
    ydim8_temper_kernel_eqD = ydim8
    ydim8_temper_kernel_eqD_h = ydim8
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)


  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,9)
  call ops_halo_exchanges(opsArgArray,9,range)
  call ops_H_D_exchanges_device(opsArgArray,9)

  call ops_timers_core(t2)

  call temper_kernel_eqD_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Local, &
  & opsDat4Local, &
  & opsDat5Local, &
  & opsDat6Local, &
  & opsDat7Local, &
  & opsDat8Local, &
  & idx, &
  & dat1_base, &
  & dat2_base, &
  & dat3_base, &
  & dat4_base, &
  & dat5_base, &
  & dat6_base, &
  & dat7_base, &
  & dat8_base, &
  & x_size, y_size, z_size )

  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 9)
  call ops_set_halo_dirtybit3(opsArg1,range)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start_indx, end_indx, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg3,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg4,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg5,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg6,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg7,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg8,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(529,userSubroutine,t3-t2,t2-t1,transfer_total,0)

end subroutine

END MODULE
