!
! auto-generated by ops_fortran.py
!

MODULE BOUNTT_KERNEL_EQF_YDIR_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

real(kind=8), dimension(:), device, allocatable :: opGblDat9Device_bountt_kernel_eqF_ydir
real(kind=8), dimension(:), device, allocatable :: opGblDat10Device_bountt_kernel_eqF_ydir
integer(kind=4), dimension(:), device, allocatable :: opGblDat11Device_bountt_kernel_eqF_ydir
integer(kind=4), dimension(:), device, allocatable :: opGblDat12Device_bountt_kernel_eqF_ydir
integer(kind=4), dimension(:), device, allocatable :: opGblDat13Device_bountt_kernel_eqF_ydir
integer(4), constant :: xdim1_bountt_kernel_eqF_ydir
integer(4):: xdim1_bountt_kernel_eqF_ydir_h  = -1
integer(4), constant :: ydim1_bountt_kernel_eqF_ydir
integer(4):: ydim1_bountt_kernel_eqF_ydir_h  = -1
#define OPS_ACC1(x,y,z) (x+xdim1_bountt_kernel_eqF_ydir*(y)+xdim1_bountt_kernel_eqF_ydir*ydim1_bountt_kernel_eqF_ydir*(z)+1)

integer(4), constant :: xdim2_bountt_kernel_eqF_ydir
integer(4):: xdim2_bountt_kernel_eqF_ydir_h  = -1
integer(4), constant :: ydim2_bountt_kernel_eqF_ydir
integer(4):: ydim2_bountt_kernel_eqF_ydir_h  = -1
#define OPS_ACC2(x,y,z) (x+xdim2_bountt_kernel_eqF_ydir*(y)+xdim2_bountt_kernel_eqF_ydir*ydim2_bountt_kernel_eqF_ydir*(z)+1)

integer(4), constant :: xdim3_bountt_kernel_eqF_ydir
integer(4):: xdim3_bountt_kernel_eqF_ydir_h  = -1
integer(4), constant :: ydim3_bountt_kernel_eqF_ydir
integer(4):: ydim3_bountt_kernel_eqF_ydir_h  = -1
#define OPS_ACC3(x,y,z) (x+xdim3_bountt_kernel_eqF_ydir*(y)+xdim3_bountt_kernel_eqF_ydir*ydim3_bountt_kernel_eqF_ydir*(z)+1)

integer(4), constant :: xdim4_bountt_kernel_eqF_ydir
integer(4):: xdim4_bountt_kernel_eqF_ydir_h  = -1
integer(4), constant :: ydim4_bountt_kernel_eqF_ydir
integer(4):: ydim4_bountt_kernel_eqF_ydir_h  = -1
#define OPS_ACC4(x,y,z) (x+xdim4_bountt_kernel_eqF_ydir*(y)+xdim4_bountt_kernel_eqF_ydir*ydim4_bountt_kernel_eqF_ydir*(z)+1)

integer(4), constant :: xdim5_bountt_kernel_eqF_ydir
integer(4):: xdim5_bountt_kernel_eqF_ydir_h  = -1
integer(4), constant :: ydim5_bountt_kernel_eqF_ydir
integer(4):: ydim5_bountt_kernel_eqF_ydir_h  = -1
#define OPS_ACC5(x,y,z) (x+xdim5_bountt_kernel_eqF_ydir*(y)+xdim5_bountt_kernel_eqF_ydir*ydim5_bountt_kernel_eqF_ydir*(z)+1)

integer(4), constant :: xdim6_bountt_kernel_eqF_ydir
integer(4):: xdim6_bountt_kernel_eqF_ydir_h  = -1
integer(4), constant :: ydim6_bountt_kernel_eqF_ydir
integer(4):: ydim6_bountt_kernel_eqF_ydir_h  = -1
#define OPS_ACC6(x,y,z) (x+xdim6_bountt_kernel_eqF_ydir*(y)+xdim6_bountt_kernel_eqF_ydir*ydim6_bountt_kernel_eqF_ydir*(z)+1)

integer(4), constant :: xdim7_bountt_kernel_eqF_ydir
integer(4):: xdim7_bountt_kernel_eqF_ydir_h  = -1
integer(4), constant :: ydim7_bountt_kernel_eqF_ydir
integer(4):: ydim7_bountt_kernel_eqF_ydir_h  = -1
#define OPS_ACC7(x,y,z) (x+xdim7_bountt_kernel_eqF_ydir*(y)+xdim7_bountt_kernel_eqF_ydir*ydim7_bountt_kernel_eqF_ydir*(z)+1)

integer(4), constant :: xdim8_bountt_kernel_eqF_ydir
integer(4):: xdim8_bountt_kernel_eqF_ydir_h  = -1
integer(4), constant :: ydim8_bountt_kernel_eqF_ydir
integer(4):: ydim8_bountt_kernel_eqF_ydir_h  = -1
#define OPS_ACC8(x,y,z) (x+xdim8_bountt_kernel_eqF_ydir*(y)+xdim8_bountt_kernel_eqF_ydir*ydim8_bountt_kernel_eqF_ydir*(z)+1)









contains

!user function
attributes (device) SUBROUTINE bountt_kernel_eqf_ydir_gpu(erhs,yrhs,yrun,yerr,itndex,drhs,strty,stryy,amasch,rgspec,ncpoly,ncpom1,ncenth,ispec,icoef1,icoef2)
    use data_types
    implicit none

    real(kind=8), dimension(1) :: erhs,yrhs,yrun,yerr
    integer(kind=4), dimension(1), intent(in) :: itndex
    real(kind=8), dimension(1), intent(in) :: drhs,strty,stryy

    integer(kind=4), intent(in) :: ispec,icoef1,icoef2

    real(kind=8), dimension(ncofmx_opsconstant,ntinmx_opsconstant,nspcmx_opsconstant), intent(in) :: amasch
    real(kind=8), dimension(nspcmx_opsconstant), intent(in) :: rgspec
    integer(kind=4), dimension(ntinmx_opsconstant,nspcmx_opsconstant), intent(in) :: ncpoly,ncpom1,ncenth

    real(kind=8) :: fornow
    integer(kind=4) :: itint,icp

    itint = 1 +MOD(itndex(OPS_ACC5(0,0,0)),icoef1)/icoef2
    fornow = amasch(ncpoly(itint,ispec),itint,ispec)

    DO icp = ncpom1(itint,ispec),1,-1
        fornow = fornow*strty(OPS_ACC7(0,0,0)) + amasch(icp,itint,ispec)
    END DO

    fornow = amasch(ncenth(itint,ispec),itint,ispec)  &
              + fornow*strty(OPS_ACC7(0,0,0))

    yrhs(OPS_ACC2(0,0,0)) = drhs(OPS_ACC6(0,0,0))*stryy(OPS_ACC8(0,0,0))

    yrun(OPS_ACC3(0,0,0)) = yrhs(OPS_ACC2(0,0,0))

    yerr(OPS_ACC4(0,0,0)) = 0.0_8

    erhs(OPS_ACC1(0,0,0)) = erhs(OPS_ACC1(0,0,0))  &
                      + (fornow-rgspec(ispec)*strty(OPS_ACC7(0,0,0)))*yrhs(OPS_ACC2(0,0,0))

END SUBROUTINE

#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4
#undef OPS_ACC5
#undef OPS_ACC6
#undef OPS_ACC7
#undef OPS_ACC8


!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine bountt_kernel_eqF_ydir_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsDat3Local, &
& opsDat4Local, &
& opsDat5Local, &
& opsDat6Local, &
& opsDat7Local, &
& opsDat8Local, &
& opsGblDat9Device,   &
& opsGblDat10Device,   &
& opsGblDat11Device,   &
& opsGblDat12Device,   &
& opsGblDat13Device,   &
& opsGblDat14Device,   &
& opsGblDat15Device,   &
& opsGblDat16Device,   &
& dat1_base, &
& dat2_base, &
& dat3_base, &
& dat4_base, &
& dat5_base, &
& dat6_base, &
& dat7_base, &
& dat8_base, &
& size1, size2, size3 )

  IMPLICIT NONE

  real(kind=8), device, dimension(*), intent(inout) :: opsDat1Local(*)
  integer(4) :: arg1
  real(kind=8), device, dimension(*), intent(inout) :: opsDat2Local(*)
  integer(4) :: arg2
  real(kind=8), device, dimension(*), intent(inout) :: opsDat3Local(*)
  integer(4) :: arg3
  real(kind=8), device, dimension(*), intent(inout) :: opsDat4Local(*)
  integer(4) :: arg4
  integer(kind=4), device, dimension(*), intent(in)    :: opsDat5Local
  integer(4) :: arg5
  real(kind=8), device, dimension(*), intent(in)    :: opsDat6Local
  integer(4) :: arg6
  real(kind=8), device, dimension(*), intent(in)    :: opsDat7Local
  integer(4) :: arg7
  real(kind=8), device, dimension(*), intent(in)    :: opsDat8Local
  integer(4) :: arg8
  real(kind=8), device :: opsGblDat9Device(:)
  real(kind=8), device :: opsGblDat10Device(:)
  integer(kind=4), device :: opsGblDat11Device(:)
  integer(kind=4), device :: opsGblDat12Device(:)
  integer(kind=4), device :: opsGblDat13Device(:)
  integer(kind=4), value :: opsGblDat14Device
  integer(kind=4), value :: opsGblDat15Device
  integer(kind=4), value :: opsGblDat16Device
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4), value :: dat3_base
  integer(4), value :: dat4_base
  integer(4), value :: dat5_base
  integer(4), value :: dat6_base
  integer(4), value :: dat7_base
  integer(4), value :: dat8_base
  integer(4), value :: size1, size2, size3
  integer(4)        :: n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  arg1 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_bountt_kernel_eqF_ydir + (n_z-1) * 1*1 * xdim1_bountt_kernel_eqF_ydir * ydim1_bountt_kernel_eqF_ydir
  arg2 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_bountt_kernel_eqF_ydir + (n_z-1) * 1*1 * xdim2_bountt_kernel_eqF_ydir * ydim2_bountt_kernel_eqF_ydir
  arg3 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim3_bountt_kernel_eqF_ydir + (n_z-1) * 1*1 * xdim3_bountt_kernel_eqF_ydir * ydim3_bountt_kernel_eqF_ydir
  arg4 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim4_bountt_kernel_eqF_ydir + (n_z-1) * 1*1 * xdim4_bountt_kernel_eqF_ydir * ydim4_bountt_kernel_eqF_ydir
  arg5 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim5_bountt_kernel_eqF_ydir + (n_z-1) * 1*1 * xdim5_bountt_kernel_eqF_ydir * ydim5_bountt_kernel_eqF_ydir
  arg6 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim6_bountt_kernel_eqF_ydir + (n_z-1) * 1*1 * xdim6_bountt_kernel_eqF_ydir * ydim6_bountt_kernel_eqF_ydir
  arg7 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim7_bountt_kernel_eqF_ydir + (n_z-1) * 1*1 * xdim7_bountt_kernel_eqF_ydir * ydim7_bountt_kernel_eqF_ydir
  arg8 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim8_bountt_kernel_eqF_ydir + (n_z-1) * 1*1 * xdim8_bountt_kernel_eqF_ydir * ydim8_bountt_kernel_eqF_ydir
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN

    call bountt_kernel_eqF_ydir_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsDat3Local(dat3_base+arg3), &
    & opsDat4Local(dat4_base+arg4), &
    & opsDat5Local(dat5_base+arg5), &
    & opsDat6Local(dat6_base+arg6), &
    & opsDat7Local(dat7_base+arg7), &
    & opsDat8Local(dat8_base+arg8), &
    & opsGblDat9Device(1), &
    & opsGblDat10Device(1), &
    & opsGblDat11Device(1), &
    & opsGblDat12Device(1), &
    & opsGblDat13Device(1), &
    & opsGblDat14Device, &
    & opsGblDat15Device, &
    & opsGblDat16Device )

  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine bountt_kernel_eqF_ydir_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5, &
& opsArg6, &
& opsArg7, &
& opsArg8, &
& opsArg9, &
& opsArg10, &
& opsArg11, &
& opsArg12, &
& opsArg13, &
& opsArg14, &
& opsArg15, &
& opsArg16)

  USE CUDAFOR
  IMPLICIT NONE

  character(kind=c_char,len=*), intent(in) :: userSubroutine
  type(ops_block), intent(in) :: block
  integer(4), intent(in):: dim
  integer(4), dimension(2*dim), intent(in) :: range
  real(8) :: t1,t2,t3
  real(4) :: transfer_total, transfer
  integer(4) :: istat

  type(ops_arg), intent(in) :: opsArg1
  real(kind=8), dimension(:), device, pointer  :: opsDat1Local
  integer(4) :: opsDat1Cardinality
  integer(4), pointer, dimension(:) :: dat1_size
  integer(4) :: dat1_base
  integer(4) :: xdim1
  integer(4) :: ydim1, zdim1

  type(ops_arg), intent(in) :: opsArg2
  real(kind=8), dimension(:), device, pointer  :: opsDat2Local
  integer(4) :: opsDat2Cardinality
  integer(4), pointer, dimension(:) :: dat2_size
  integer(4) :: dat2_base
  integer(4) :: xdim2
  integer(4) :: ydim2, zdim2

  type(ops_arg), intent(in) :: opsArg3
  real(kind=8), dimension(:), device, pointer  :: opsDat3Local
  integer(4) :: opsDat3Cardinality
  integer(4), pointer, dimension(:) :: dat3_size
  integer(4) :: dat3_base
  integer(4) :: xdim3
  integer(4) :: ydim3, zdim3

  type(ops_arg), intent(in) :: opsArg4
  real(kind=8), dimension(:), device, pointer  :: opsDat4Local
  integer(4) :: opsDat4Cardinality
  integer(4), pointer, dimension(:) :: dat4_size
  integer(4) :: dat4_base
  integer(4) :: xdim4
  integer(4) :: ydim4, zdim4

  type(ops_arg), intent(in) :: opsArg5
  integer(kind=4), dimension(:), device, pointer  :: opsDat5Local
  integer(4) :: opsDat5Cardinality
  integer(4), pointer, dimension(:) :: dat5_size
  integer(4) :: dat5_base
  integer(4) :: xdim5
  integer(4) :: ydim5, zdim5

  type(ops_arg), intent(in) :: opsArg6
  real(kind=8), dimension(:), device, pointer  :: opsDat6Local
  integer(4) :: opsDat6Cardinality
  integer(4), pointer, dimension(:) :: dat6_size
  integer(4) :: dat6_base
  integer(4) :: xdim6
  integer(4) :: ydim6, zdim6

  type(ops_arg), intent(in) :: opsArg7
  real(kind=8), dimension(:), device, pointer  :: opsDat7Local
  integer(4) :: opsDat7Cardinality
  integer(4), pointer, dimension(:) :: dat7_size
  integer(4) :: dat7_base
  integer(4) :: xdim7
  integer(4) :: ydim7, zdim7

  type(ops_arg), intent(in) :: opsArg8
  real(kind=8), dimension(:), device, pointer  :: opsDat8Local
  integer(4) :: opsDat8Cardinality
  integer(4), pointer, dimension(:) :: dat8_size
  integer(4) :: dat8_base
  integer(4) :: xdim8
  integer(4) :: ydim8, zdim8

  type(ops_arg), intent(in) :: opsArg9
  integer(4) :: opsDat9Cardinality
  real(kind=8), dimension(:), device, pointer :: opsDat9Host
  type(ops_arg), intent(in) :: opsArg10
  integer(4) :: opsDat10Cardinality
  real(kind=8), dimension(:), device, pointer :: opsDat10Host
  type(ops_arg), intent(in) :: opsArg11
  integer(4) :: opsDat11Cardinality
  integer(kind=4), dimension(:), device, pointer :: opsDat11Host
  type(ops_arg), intent(in) :: opsArg12
  integer(4) :: opsDat12Cardinality
  integer(kind=4), dimension(:), device, pointer :: opsDat12Host
  type(ops_arg), intent(in) :: opsArg13
  integer(4) :: opsDat13Cardinality
  integer(kind=4), dimension(:), device, pointer :: opsDat13Host
  type(ops_arg), intent(in) :: opsArg14
  integer(4) :: opsDat14Cardinality
  integer(kind=4), dimension(:), pointer :: opsDat14Host
  type(ops_arg), intent(in) :: opsArg15
  integer(4) :: opsDat15Cardinality
  integer(kind=4), dimension(:), pointer :: opsDat15Host
  type(ops_arg), intent(in) :: opsArg16
  integer(4) :: opsDat16Cardinality
  integer(kind=4), dimension(:), pointer :: opsDat16Host

  integer(4) :: x_size, y_size, z_size
  integer(4), dimension(3) :: start_indx, end_indx
  integer(4) :: n
  integer(4) :: i10
  integer(4) :: i20
  integer(4) :: blocksPerGrid
  integer(4) :: nshared
  integer(4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type(ops_arg), dimension(16) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5
  opsArgArray(6) = opsArg6
  opsArgArray(7) = opsArg7
  opsArgArray(8) = opsArg8
  opsArgArray(9) = opsArg9
  opsArgArray(10) = opsArg10
  opsArgArray(11) = opsArg11
  opsArgArray(12) = opsArg12
  opsArgArray(13) = opsArg13
  opsArgArray(14) = opsArg14
  opsArgArray(15) = opsArg15
  opsArgArray(16) = opsArg16

  call setKernelTime(474,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start_indx, end_indx, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start_indx(n) = range(2*n-1)
    end_indx(n)   = range(2*n)
  END DO
#endif


  x_size = MAX(0,end_indx(1)-start_indx(1)+1)
  y_size = MAX(0,end_indx(2)-start_indx(2)+1)
  z_size = MAX(0,end_indx(3)-start_indx(3)+1)

  call ops_upload_gbls(opsArgArray,16)
  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start_indx,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start_indx,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg3),dat3_size,(/dim/))
  xdim3 = dat3_size(1)
  ydim3 = dat3_size(2)
  zdim3 = dat3_size(3)
  opsDat3Cardinality = opsArg3%dim * xdim3 * ydim3 * zdim3
  dat3_base = getDatBaseFromOpsArg3D(opsArg3,start_indx,1)
  call c_f_pointer(opsArg3%data_d,opsDat3Local,(/opsDat3Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg4),dat4_size,(/dim/))
  xdim4 = dat4_size(1)
  ydim4 = dat4_size(2)
  zdim4 = dat4_size(3)
  opsDat4Cardinality = opsArg4%dim * xdim4 * ydim4 * zdim4
  dat4_base = getDatBaseFromOpsArg3D(opsArg4,start_indx,1)
  call c_f_pointer(opsArg4%data_d,opsDat4Local,(/opsDat4Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg5),dat5_size,(/dim/))
  xdim5 = dat5_size(1)
  ydim5 = dat5_size(2)
  zdim5 = dat5_size(3)
  opsDat5Cardinality = opsArg5%dim * xdim5 * ydim5 * zdim5
  dat5_base = getDatBaseFromOpsArg3D(opsArg5,start_indx,1)
  call c_f_pointer(opsArg5%data_d,opsDat5Local,(/opsDat5Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg6),dat6_size,(/dim/))
  xdim6 = dat6_size(1)
  ydim6 = dat6_size(2)
  zdim6 = dat6_size(3)
  opsDat6Cardinality = opsArg6%dim * xdim6 * ydim6 * zdim6
  dat6_base = getDatBaseFromOpsArg3D(opsArg6,start_indx,1)
  call c_f_pointer(opsArg6%data_d,opsDat6Local,(/opsDat6Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg7),dat7_size,(/dim/))
  xdim7 = dat7_size(1)
  ydim7 = dat7_size(2)
  zdim7 = dat7_size(3)
  opsDat7Cardinality = opsArg7%dim * xdim7 * ydim7 * zdim7
  dat7_base = getDatBaseFromOpsArg3D(opsArg7,start_indx,1)
  call c_f_pointer(opsArg7%data_d,opsDat7Local,(/opsDat7Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg8),dat8_size,(/dim/))
  xdim8 = dat8_size(1)
  ydim8 = dat8_size(2)
  zdim8 = dat8_size(3)
  opsDat8Cardinality = opsArg8%dim * xdim8 * ydim8 * zdim8
  dat8_base = getDatBaseFromOpsArg3D(opsArg8,start_indx,1)
  call c_f_pointer(opsArg8%data_d,opsDat8Local,(/opsDat8Cardinality/))

  opsDat9Cardinality = opsArg9%dim
  call c_f_pointer(opsArgArray(9)%data_d,opsDat9Host,(/opsDat9Cardinality/))

  opsDat10Cardinality = opsArg10%dim
  call c_f_pointer(opsArgArray(10)%data_d,opsDat10Host,(/opsDat10Cardinality/))

  opsDat11Cardinality = opsArg11%dim
  call c_f_pointer(opsArgArray(11)%data_d,opsDat11Host,(/opsDat11Cardinality/))

  opsDat12Cardinality = opsArg12%dim
  call c_f_pointer(opsArgArray(12)%data_d,opsDat12Host,(/opsDat12Cardinality/))

  opsDat13Cardinality = opsArg13%dim
  call c_f_pointer(opsArgArray(13)%data_d,opsDat13Host,(/opsDat13Cardinality/))

  opsDat14Cardinality = opsArg14%dim
  call c_f_pointer(opsArg14%data,opsDat14Host,(/opsDat14Cardinality/))

  opsDat15Cardinality = opsArg15%dim
  call c_f_pointer(opsArg15%data,opsDat15Host,(/opsDat15Cardinality/))

  opsDat16Cardinality = opsArg16%dim
  call c_f_pointer(opsArg16%data,opsDat16Host,(/opsDat16Cardinality/))

  IF ((xdim1 .NE. xdim1_bountt_kernel_eqF_ydir_h) .OR. &
  (ydim1 .NE. ydim1_bountt_kernel_eqF_ydir_h) .OR. &
  (xdim2 .NE. xdim2_bountt_kernel_eqF_ydir_h) .OR. &
  (ydim2 .NE. ydim2_bountt_kernel_eqF_ydir_h) .OR. &
  (xdim3 .NE. xdim3_bountt_kernel_eqF_ydir_h) .OR. &
  (ydim3 .NE. ydim3_bountt_kernel_eqF_ydir_h) .OR. &
  (xdim4 .NE. xdim4_bountt_kernel_eqF_ydir_h) .OR. &
  (ydim4 .NE. ydim4_bountt_kernel_eqF_ydir_h) .OR. &
  (xdim5 .NE. xdim5_bountt_kernel_eqF_ydir_h) .OR. &
  (ydim5 .NE. ydim5_bountt_kernel_eqF_ydir_h) .OR. &
  (xdim6 .NE. xdim6_bountt_kernel_eqF_ydir_h) .OR. &
  (ydim6 .NE. ydim6_bountt_kernel_eqF_ydir_h) .OR. &
  (xdim7 .NE. xdim7_bountt_kernel_eqF_ydir_h) .OR. &
  (ydim7 .NE. ydim7_bountt_kernel_eqF_ydir_h) .OR. &
  (xdim8 .NE. xdim8_bountt_kernel_eqF_ydir_h) .OR. &
  (ydim8 .NE. ydim8_bountt_kernel_eqF_ydir_h) ) THEN
    xdim1_bountt_kernel_eqF_ydir = xdim1
    xdim1_bountt_kernel_eqF_ydir_h = xdim1
    ydim1_bountt_kernel_eqF_ydir = ydim1
    ydim1_bountt_kernel_eqF_ydir_h = ydim1
    xdim2_bountt_kernel_eqF_ydir = xdim2
    xdim2_bountt_kernel_eqF_ydir_h = xdim2
    ydim2_bountt_kernel_eqF_ydir = ydim2
    ydim2_bountt_kernel_eqF_ydir_h = ydim2
    xdim3_bountt_kernel_eqF_ydir = xdim3
    xdim3_bountt_kernel_eqF_ydir_h = xdim3
    ydim3_bountt_kernel_eqF_ydir = ydim3
    ydim3_bountt_kernel_eqF_ydir_h = ydim3
    xdim4_bountt_kernel_eqF_ydir = xdim4
    xdim4_bountt_kernel_eqF_ydir_h = xdim4
    ydim4_bountt_kernel_eqF_ydir = ydim4
    ydim4_bountt_kernel_eqF_ydir_h = ydim4
    xdim5_bountt_kernel_eqF_ydir = xdim5
    xdim5_bountt_kernel_eqF_ydir_h = xdim5
    ydim5_bountt_kernel_eqF_ydir = ydim5
    ydim5_bountt_kernel_eqF_ydir_h = ydim5
    xdim6_bountt_kernel_eqF_ydir = xdim6
    xdim6_bountt_kernel_eqF_ydir_h = xdim6
    ydim6_bountt_kernel_eqF_ydir = ydim6
    ydim6_bountt_kernel_eqF_ydir_h = ydim6
    xdim7_bountt_kernel_eqF_ydir = xdim7
    xdim7_bountt_kernel_eqF_ydir_h = xdim7
    ydim7_bountt_kernel_eqF_ydir = ydim7
    ydim7_bountt_kernel_eqF_ydir_h = ydim7
    xdim8_bountt_kernel_eqF_ydir = xdim8
    xdim8_bountt_kernel_eqF_ydir_h = xdim8
    ydim8_bountt_kernel_eqF_ydir = ydim8
    ydim8_bountt_kernel_eqF_ydir_h = ydim8
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)


  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,16)
  call ops_halo_exchanges(opsArgArray,16,range)
  call ops_H_D_exchanges_device(opsArgArray,16)

  call ops_timers_core(t2)

  call bountt_kernel_eqF_ydir_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Local, &
  & opsDat4Local, &
  & opsDat5Local, &
  & opsDat6Local, &
  & opsDat7Local, &
  & opsDat8Local, &
  & opsDat9Host, &
  & opsDat10Host, &
  & opsDat11Host, &
  & opsDat12Host, &
  & opsDat13Host, &
  & opsDat14Host(1), &
  & opsDat15Host(1), &
  & opsDat16Host(1), &
  & dat1_base, &
  & dat2_base, &
  & dat3_base, &
  & dat4_base, &
  & dat5_base, &
  & dat6_base, &
  & dat7_base, &
  & dat8_base, &
  & x_size, y_size, z_size )

  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 16)
  call ops_set_halo_dirtybit3(opsArg1,range)
  call ops_set_halo_dirtybit3(opsArg2,range)
  call ops_set_halo_dirtybit3(opsArg3,range)
  call ops_set_halo_dirtybit3(opsArg4,range)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start_indx, end_indx, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg3,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg4,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg5,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg6,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg7,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg8,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(474,userSubroutine,t3-t2,t2-t1,transfer_total,0)

end subroutine

END MODULE
