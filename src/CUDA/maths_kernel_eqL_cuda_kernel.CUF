!
! auto-generated by ops_fortran.py
!

MODULE MATHS_KERNEL_EQL_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

real(kind=8), dimension(:), device, allocatable :: opGblDat4Device_maths_kernel_eqL
integer(4), constant :: xdim1_maths_kernel_eqL
integer(4):: xdim1_maths_kernel_eqL_h  = -1
integer(4), constant :: ydim1_maths_kernel_eqL
integer(4):: ydim1_maths_kernel_eqL_h  = -1
#define OPS_ACC1(x,y,z) (x+xdim1_maths_kernel_eqL*(y)+xdim1_maths_kernel_eqL*ydim1_maths_kernel_eqL*(z)+1)

integer(4), constant :: xdim2_maths_kernel_eqL
integer(4):: xdim2_maths_kernel_eqL_h  = -1
integer(4), constant :: ydim2_maths_kernel_eqL
integer(4):: ydim2_maths_kernel_eqL_h  = -1
#define OPS_ACC2(x,y,z) (x+xdim2_maths_kernel_eqL*(y)+xdim2_maths_kernel_eqL*ydim2_maths_kernel_eqL*(z)+1)

integer(4), constant :: xdim3_maths_kernel_eqL
integer(4):: xdim3_maths_kernel_eqL_h  = -1
integer(4), constant :: ydim3_maths_kernel_eqL
integer(4):: ydim3_maths_kernel_eqL_h  = -1
#define OPS_ACC3(x,y,z) (x+xdim3_maths_kernel_eqL*(y)+xdim3_maths_kernel_eqL*ydim3_maths_kernel_eqL*(z)+1)




contains

!user function
attributes (device) SUBROUTINE maths_kernel_eql_gpu(out_arr, in_arr1, in_arr2, rgspec, ispec)

    implicit none

    real(kind=8), dimension(1) :: out_arr
    real(kind=8), dimension(1), intent(in) :: in_arr1, in_arr2
    integer(kind=4), intent(in) :: ispec
    real(kind=8), dimension(nspcmx_opsconstant), intent(in) :: rgspec

    out_arr(OPS_ACC1(0,0,0)) = out_arr(OPS_ACC1(0,0,0)) + rgspec(ispec)*in_arr1(OPS_ACC2(0,0,0))*in_arr2(OPS_ACC3(0,0,0))

END SUBROUTINE

#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3


!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine maths_kernel_eqL_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsDat3Local, &
& opsGblDat4Device,   &
& opsGblDat5Device,   &
& dat1_base, &
& dat2_base, &
& dat3_base, &
& size1, size2, size3 )

  IMPLICIT NONE

  real(kind=8), device, dimension(*), intent(inout) :: opsDat1Local(*)
  integer(4) :: arg1
  real(kind=8), device, dimension(*), intent(in)    :: opsDat2Local
  integer(4) :: arg2
  real(kind=8), device, dimension(*), intent(in)    :: opsDat3Local
  integer(4) :: arg3
  real(kind=8), device :: opsGblDat4Device(:)
  integer(kind=4), value :: opsGblDat5Device
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4), value :: dat3_base
  integer(4), value :: size1, size2, size3
  integer(4)        :: n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  arg1 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_maths_kernel_eqL + (n_z-1) * 1*1 * xdim1_maths_kernel_eqL * ydim1_maths_kernel_eqL
  arg2 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_maths_kernel_eqL + (n_z-1) * 1*1 * xdim2_maths_kernel_eqL * ydim2_maths_kernel_eqL
  arg3 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim3_maths_kernel_eqL + (n_z-1) * 1*1 * xdim3_maths_kernel_eqL * ydim3_maths_kernel_eqL
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN

    call maths_kernel_eqL_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsDat3Local(dat3_base+arg3), &
    & opsGblDat4Device(1), &
    & opsGblDat5Device )

  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine maths_kernel_eqL_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5)

  USE CUDAFOR
  IMPLICIT NONE

  character(kind=c_char,len=*), intent(in) :: userSubroutine
  type(ops_block), intent(in) :: block
  integer(4), intent(in):: dim
  integer(4), dimension(2*dim), intent(in) :: range
  real(8) :: t1,t2,t3
  real(4) :: transfer_total, transfer
  integer(4) :: istat

  type(ops_arg), intent(in) :: opsArg1
  real(kind=8), dimension(:), device, pointer  :: opsDat1Local
  integer(4) :: opsDat1Cardinality
  integer(4), pointer, dimension(:) :: dat1_size
  integer(4) :: dat1_base
  integer(4) :: xdim1
  integer(4) :: ydim1, zdim1

  type(ops_arg), intent(in) :: opsArg2
  real(kind=8), dimension(:), device, pointer  :: opsDat2Local
  integer(4) :: opsDat2Cardinality
  integer(4), pointer, dimension(:) :: dat2_size
  integer(4) :: dat2_base
  integer(4) :: xdim2
  integer(4) :: ydim2, zdim2

  type(ops_arg), intent(in) :: opsArg3
  real(kind=8), dimension(:), device, pointer  :: opsDat3Local
  integer(4) :: opsDat3Cardinality
  integer(4), pointer, dimension(:) :: dat3_size
  integer(4) :: dat3_base
  integer(4) :: xdim3
  integer(4) :: ydim3, zdim3

  type(ops_arg), intent(in) :: opsArg4
  integer(4) :: opsDat4Cardinality
  real(kind=8), dimension(:), device, pointer :: opsDat4Host
  type(ops_arg), intent(in) :: opsArg5
  integer(4) :: opsDat5Cardinality
  integer(kind=4), dimension(:), pointer :: opsDat5Host

  integer(4) :: x_size, y_size, z_size
  integer(4), dimension(3) :: start_indx, end_indx
  integer(4) :: n
  integer(4) :: i10
  integer(4) :: i20
  integer(4) :: blocksPerGrid
  integer(4) :: nshared
  integer(4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type(ops_arg), dimension(5) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5

  call setKernelTime(238,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start_indx, end_indx, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start_indx(n) = range(2*n-1)
    end_indx(n)   = range(2*n)
  END DO
#endif


  x_size = MAX(0,end_indx(1)-start_indx(1)+1)
  y_size = MAX(0,end_indx(2)-start_indx(2)+1)
  z_size = MAX(0,end_indx(3)-start_indx(3)+1)

  call ops_upload_gbls(opsArgArray,5)
  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start_indx,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start_indx,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg3),dat3_size,(/dim/))
  xdim3 = dat3_size(1)
  ydim3 = dat3_size(2)
  zdim3 = dat3_size(3)
  opsDat3Cardinality = opsArg3%dim * xdim3 * ydim3 * zdim3
  dat3_base = getDatBaseFromOpsArg3D(opsArg3,start_indx,1)
  call c_f_pointer(opsArg3%data_d,opsDat3Local,(/opsDat3Cardinality/))

  opsDat4Cardinality = opsArg4%dim
  call c_f_pointer(opsArgArray(4)%data_d,opsDat4Host,(/opsDat4Cardinality/))

  opsDat5Cardinality = opsArg5%dim
  call c_f_pointer(opsArg5%data,opsDat5Host,(/opsDat5Cardinality/))

  IF ((xdim1 .NE. xdim1_maths_kernel_eqL_h) .OR. &
  (ydim1 .NE. ydim1_maths_kernel_eqL_h) .OR. &
  (xdim2 .NE. xdim2_maths_kernel_eqL_h) .OR. &
  (ydim2 .NE. ydim2_maths_kernel_eqL_h) .OR. &
  (xdim3 .NE. xdim3_maths_kernel_eqL_h) .OR. &
  (ydim3 .NE. ydim3_maths_kernel_eqL_h) ) THEN
    xdim1_maths_kernel_eqL = xdim1
    xdim1_maths_kernel_eqL_h = xdim1
    ydim1_maths_kernel_eqL = ydim1
    ydim1_maths_kernel_eqL_h = ydim1
    xdim2_maths_kernel_eqL = xdim2
    xdim2_maths_kernel_eqL_h = xdim2
    ydim2_maths_kernel_eqL = ydim2
    ydim2_maths_kernel_eqL_h = ydim2
    xdim3_maths_kernel_eqL = xdim3
    xdim3_maths_kernel_eqL_h = xdim3
    ydim3_maths_kernel_eqL = ydim3
    ydim3_maths_kernel_eqL_h = ydim3
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)


  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,5)
  call ops_halo_exchanges(opsArgArray,5,range)
  call ops_H_D_exchanges_device(opsArgArray,5)

  call ops_timers_core(t2)

  call maths_kernel_eqL_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Local, &
  & opsDat4Host, &
  & opsDat5Host(1), &
  & dat1_base, &
  & dat2_base, &
  & dat3_base, &
  & x_size, y_size, z_size )

  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 5)
  call ops_set_halo_dirtybit3(opsArg1,range)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start_indx, end_indx, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start_indx, end_indx, opsArg3,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(238,userSubroutine,t3-t2,t2-t1,transfer_total,0)

end subroutine

END MODULE
