!
! auto-generated by ops_fortran.py
!
MODULE D2FDZ2_KERNEL_MAIN_MODULE
USE OPS_FORTRAN_DECLARATIONS
USE OPS_FORTRAN_RT_SUPPORT

USE OPS_CONSTANTS
USE ISO_C_BINDING
USE CUDAFOR

INTEGER(KIND=4), constant :: xdim1_d2fdz2_kernel_main
INTEGER(KIND=4):: xdim1_d2fdz2_kernel_main_h  = -1
INTEGER(KIND=4), constant :: ydim1_d2fdz2_kernel_main
INTEGER(KIND=4):: ydim1_d2fdz2_kernel_main_h  = -1
INTEGER(KIND=4), constant :: zdim1_d2fdz2_kernel_main
INTEGER(KIND=4):: zdim1_d2fdz2_kernel_main_h  = -1
#define OPS_ACC1(x,y,z) (x+xdim1_d2fdz2_kernel_main*(y)+xdim1_d2fdz2_kernel_main*ydim1_d2fdz2_kernel_main*(z)+1)
INTEGER(KIND=4), constant :: xdim2_d2fdz2_kernel_main
INTEGER(KIND=4):: xdim2_d2fdz2_kernel_main_h  = -1
INTEGER(KIND=4), constant :: ydim2_d2fdz2_kernel_main
INTEGER(KIND=4):: ydim2_d2fdz2_kernel_main_h  = -1
INTEGER(KIND=4), constant :: zdim2_d2fdz2_kernel_main
INTEGER(KIND=4):: zdim2_d2fdz2_kernel_main_h  = -1
#define OPS_ACC2(x,y,z) (x+xdim2_d2fdz2_kernel_main*(y)+xdim2_d2fdz2_kernel_main*ydim2_d2fdz2_kernel_main*(z)+1)


contains

!user function
attributes (device) SUBROUTINE d2fdz2_kernel_main_gpu(functn, fderiv, nzglbl, nendzl, nendzr, nbound, idx)
    use data_types
    implicit none

    real(kind=8), dimension(1), intent(in) :: functn
    real(kind=8), dimension(1) :: fderiv
    real(kind=8) :: fdifap,fdifbp,fdifcp,fdifdp,fdifep
    real(kind=8) :: fdifam,fdifbm,fdifcm,fdifdm,fdifem

    integer, intent(in) :: nzglbl, nendzl, nendzr, nbound
    integer, dimension(3), intent(in) :: idx
    integer :: kc, kstart, kfinis

    kstart = 1
    kfinis = nzglbl
    IF(nendzl == nbound) kstart = 6
    IF(nendzr == nbound) kfinis = nzglbl-5

    kc = idx(3)

    IF (kc >= kstart .and. kc <= kfinis) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifam = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-1))
        fdifbp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifbm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-2))
        fdifcp = functn(OPS_ACC1(0,0,3)) - functn(OPS_ACC1(0,0,0))
        fdifcm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-3))
        fdifdp = functn(OPS_ACC1(0,0,4)) - functn(OPS_ACC1(0,0,0))
        fdifdm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-4))
        fdifep = functn(OPS_ACC1(0,0,5)) - functn(OPS_ACC1(0,0,0))
        fdifem = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-5))

        fderiv(OPS_ACC2(0,0,0)) = acofsz_OPSCONSTANT*(fdifap-fdifam) + bcofsz_OPSCONSTANT*(fdifbp-fdifbm)  &
                                + ccofsz_OPSCONSTANT*(fdifcp-fdifcm) + dcofsz_OPSCONSTANT*(fdifdp-fdifdm)  &
                                + ecofsz_OPSCONSTANT*(fdifep-fdifem)

    ELSE IF (kc == 1) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifbp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifcp = functn(OPS_ACC1(0,0,3)) - functn(OPS_ACC1(0,0,0))
        fdifdp = functn(OPS_ACC1(0,0,4)) - functn(OPS_ACC1(0,0,0))
        fdifep = functn(OPS_ACC1(0,0,5)) - functn(OPS_ACC1(0,0,0))

        fderiv(OPS_ACC2(0,0,0)) = acfs1z_OPSCONSTANT*fdifap + bcfs1z_OPSCONSTANT*fdifbp  &
                                + ccfs1z_OPSCONSTANT*fdifcp + dcfs1z_OPSCONSTANT*fdifdp  &
                                + ecfs1z_OPSCONSTANT*fdifep

    ELSE IF (kc == 2) THEN

        fdifap = functn(OPS_ACC1(0,0,-1)) - functn(OPS_ACC1(0,0,0))
        fdifbp = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifcp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifdp = functn(OPS_ACC1(0,0,3)) - functn(OPS_ACC1(0,0,0))
        fdifep = functn(OPS_ACC1(0,0,4)) - functn(OPS_ACC1(0,0,0))

        fderiv(OPS_ACC2(0,0,0)) = acfs2z_OPSCONSTANT*fdifap + bcfs2z_OPSCONSTANT*fdifbp  &
                                + ccfs2z_OPSCONSTANT*fdifcp + dcfs2z_OPSCONSTANT*fdifdp  &
                                + ecfs2z_OPSCONSTANT*fdifep

    ELSE IF (kc == 3) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifam = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-1))
        fdifbp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifbm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-2))

        fderiv(OPS_ACC2(0,0,0)) = acfs3z_OPSCONSTANT*(fdifap-fdifam) + bcfs3z_OPSCONSTANT*(fdifbp-fdifbm)

    ELSE IF (kc == 4) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifam = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-1))
        fdifbp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifbm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-2))
        fdifcp = functn(OPS_ACC1(0,0,3)) - functn(OPS_ACC1(0,0,0))
        fdifcm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-3))

        fderiv(OPS_ACC2(0,0,0)) = acfs4z_OPSCONSTANT*(fdifap-fdifam)  &
                                + bcfs4z_OPSCONSTANT*(fdifbp-fdifbm) + ccfs4z_OPSCONSTANT*(fdifcp-fdifcm)

    ELSE IF (kc == 5) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifam = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-1))
        fdifbp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifbm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-2))
        fdifcp = functn(OPS_ACC1(0,0,3)) - functn(OPS_ACC1(0,0,0))
        fdifcm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-3))
        fdifdp = functn(OPS_ACC1(0,0,4)) - functn(OPS_ACC1(0,0,0))
        fdifdm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-4))

        fderiv(OPS_ACC2(0,0,0)) = acfs5z_OPSCONSTANT*(fdifap-fdifam)  &
                                + bcfs5z_OPSCONSTANT*(fdifbp-fdifbm) + ccfs5z_OPSCONSTANT*(fdifcp-fdifcm)  &
                                + dcfs5z_OPSCONSTANT*(fdifdp-fdifdm)

    ELSE IF (kc == nzglbl-4) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifam = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-1))
        fdifbp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifbm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-2))
        fdifcp = functn(OPS_ACC1(0,0,3)) - functn(OPS_ACC1(0,0,0))
        fdifcm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-3))
        fdifdp = functn(OPS_ACC1(0,0,4)) - functn(OPS_ACC1(0,0,0))
        fdifdm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-4))

        fderiv(OPS_ACC2(0,0,0)) = acfs5z_OPSCONSTANT*(fdifap-fdifam)  &
                                + bcfs5z_OPSCONSTANT*(fdifbp-fdifbm) + ccfs5z_OPSCONSTANT*(fdifcp-fdifcm)  &
                                + dcfs5z_OPSCONSTANT*(fdifdp-fdifdm)

    ELSE IF (kc == nzglbl-3) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifam = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-1))
        fdifbp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifbm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-2))
        fdifcp = functn(OPS_ACC1(0,0,3)) - functn(OPS_ACC1(0,0,0))
        fdifcm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-3))

        fderiv(OPS_ACC2(0,0,0)) = acfs4z_OPSCONSTANT*(fdifap-fdifam)  &
                                + bcfs4z_OPSCONSTANT*(fdifbp-fdifbm) + ccfs4z_OPSCONSTANT*(fdifcp-fdifcm)

    ELSE IF (kc == nzglbl-2) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifam = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-1))
        fdifbp = functn(OPS_ACC1(0,0,2)) - functn(OPS_ACC1(0,0,0))
        fdifbm = functn(OPS_ACC1(0,0,0)) - functn(OPS_ACC1(0,0,-2))

        fderiv(OPS_ACC2(0,0,0)) = acfs3z_OPSCONSTANT*(fdifap-fdifam) + bcfs3z_OPSCONSTANT*(fdifbp-fdifbm)

    ELSE IF (kc == nzglbl-1) THEN

        fdifap = functn(OPS_ACC1(0,0,1)) - functn(OPS_ACC1(0,0,0))
        fdifbp = functn(OPS_ACC1(0,0,-1)) - functn(OPS_ACC1(0,0,0))
        fdifcp = functn(OPS_ACC1(0,0,-2)) - functn(OPS_ACC1(0,0,0))
        fdifdp = functn(OPS_ACC1(0,0,-3)) - functn(OPS_ACC1(0,0,0))
        fdifep = functn(OPS_ACC1(0,0,-4)) - functn(OPS_ACC1(0,0,0))

        fderiv(OPS_ACC2(0,0,0)) = acfs2z_OPSCONSTANT*fdifap + bcfs2z_OPSCONSTANT*fdifbp  &
                                + ccfs2z_OPSCONSTANT*fdifcp + dcfs2z_OPSCONSTANT*fdifdp  &
                                + ecfs2z_OPSCONSTANT*fdifep

    ELSE IF (kc == nzglbl) THEN

        fdifap = functn(OPS_ACC1(0,0,-1)) - functn(OPS_ACC1(0,0,0))
        fdifbp = functn(OPS_ACC1(0,0,-2)) - functn(OPS_ACC1(0,0,0))
        fdifcp = functn(OPS_ACC1(0,0,-3)) - functn(OPS_ACC1(0,0,0))
        fdifdp = functn(OPS_ACC1(0,0,-4)) - functn(OPS_ACC1(0,0,0))
        fdifep = functn(OPS_ACC1(0,0,-5)) - functn(OPS_ACC1(0,0,0))

        fderiv(OPS_ACC2(0,0,0)) = acfs1z_OPSCONSTANT*fdifap + bcfs1z_OPSCONSTANT*fdifbp  &
                                + ccfs1z_OPSCONSTANT*fdifcp + dcfs1z_OPSCONSTANT*fdifdp  &
                                + ecfs1z_OPSCONSTANT*fdifep

    END IF

    fderiv(OPS_ACC2(0,0,0)) = fderiv(OPS_ACC2(0,0,0))*ovdlz2_OPSCONSTANT

END SUBROUTINE

#undef OPS_ACC1
#undef OPS_ACC2



!CUDA kernel function -- wrapper calling user kernel
attributes (global) subroutine d2fdz2_kernel_main_wrap( &
& opsDat1Local, &
& opsDat2Local, &
& opsGblDat3Device,   &
& opsGblDat4Device,   &
& opsGblDat5Device,   &
& opsGblDat6Device,   &
& idx, &
& dat1_base, &
& dat2_base, &
& size1, size2, size3 )
  IMPLICIT NONE
  real(8), DEVICE, INTENT(IN) :: opsDat1Local(*)
  integer(4) arg1
  real(8), DEVICE :: opsDat2Local(*)
  integer(4) arg2
  integer(4) idx(3),idx_local(3)
  integer, VALUE :: opsGblDat3Device
  integer, VALUE :: opsGblDat4Device
  integer, VALUE :: opsGblDat5Device
  integer, VALUE :: opsGblDat6Device
  integer(4), value :: dat1_base
  integer(4), value :: dat2_base
  integer(4) start(3)
  integer(4) end(3)
  integer, value :: size1,size2,size3
  integer n_x, n_y, n_z


  n_z = blockDim%z * (blockIdx%z-1) + threadIdx%z
  n_y = blockDim%y * (blockIdx%y-1) + threadIdx%y
  n_x = blockDim%x * (blockIdx%x-1) + threadIdx%x

  idx_local(1) = idx(1)+ n_x-1
  idx_local(2) = idx(2)+ n_y-1
  idx_local(3) = idx(3)+ n_z-1
  arg1 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim1_d2fdz2_kernel_main + (n_z-1) * 1*1 * xdim1_d2fdz2_kernel_main * ydim1_d2fdz2_kernel_main
  arg2 = (n_x-1) * 1*1 + (n_y-1) * 1*1 * xdim2_d2fdz2_kernel_main + (n_z-1) * 1*1 * xdim2_d2fdz2_kernel_main * ydim2_d2fdz2_kernel_main
  IF ((n_x-1) < size1 .AND. (n_y-1) < size2 .AND. (n_z-1) < size3) THEN
    call d2fdz2_kernel_main_gpu( &
    & opsDat1Local(dat1_base+arg1), &
    & opsDat2Local(dat2_base+arg2), &
    & opsGblDat3Device, &
    & opsGblDat4Device, &
    & opsGblDat5Device, &
    & opsGblDat6Device, &
    & idx_local )

  ENDIF


end subroutine

!host subroutine
attributes (host) subroutine d2fdz2_kernel_main_host( userSubroutine, block, dim, range, &
& opsArg1, &
& opsArg2, &
& opsArg3, &
& opsArg4, &
& opsArg5, &
& opsArg6, &
& opsArg7)
  use cudafor
  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( ops_block ), INTENT(IN) :: block
  integer(kind=4), INTENT(IN):: dim
  integer(kind=4)   , DIMENSION(2*dim), INTENT(IN) :: range
  real(kind=8) t1,t2,t3
  real(kind=4) transfer_total, transfer
  integer(kind=4) :: istat

  type ( ops_arg )  , INTENT(IN) :: opsArg1
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat1Local
  integer(kind=4) :: opsDat1Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat1_size
  integer(kind=4) :: dat1_base
  INTEGER(KIND=4) :: xdim1
  INTEGER(KIND=4) :: ydim1, zdim1

  type ( ops_arg )  , INTENT(IN) :: opsArg2
  real(8), DIMENSION(:), DEVICE, POINTER  :: opsDat2Local
  integer(kind=4) :: opsDat2Cardinality
  integer(kind=4), POINTER, DIMENSION(:)  :: dat2_size
  integer(kind=4) :: dat2_base
  INTEGER(KIND=4) :: xdim2
  INTEGER(KIND=4) :: ydim2, zdim2

  type ( ops_arg )  , INTENT(IN) :: opsArg7

  type ( ops_arg )  , INTENT(IN) :: opsArg3
  integer(kind=4) :: opsDat3Cardinality
  integer, DIMENSION(:), POINTER :: opsDat3Host
  type ( ops_arg )  , INTENT(IN) :: opsArg4
  integer(kind=4) :: opsDat4Cardinality
  integer, DIMENSION(:), POINTER :: opsDat4Host
  type ( ops_arg )  , INTENT(IN) :: opsArg5
  integer(kind=4) :: opsDat5Cardinality
  integer, DIMENSION(:), POINTER :: opsDat5Host
  type ( ops_arg )  , INTENT(IN) :: opsArg6
  integer(kind=4) :: opsDat6Cardinality
  integer, DIMENSION(:), POINTER :: opsDat6Host

  integer x_size, y_size, z_size
  integer start(3)
  integer end(3)
  integer, DEVICE :: idx(3)
  integer :: idx_h(3)
  integer(kind=4) :: n
  integer(kind=4) :: i10
  integer(kind=4) :: i20
  integer(kind=4) :: blocksPerGrid
  integer(kind=4) :: nshared
  integer(kind=4) :: nthread

  !cuda grid and thread block sizes
  type(dim3) :: grid, tblock

  type ( ops_arg ) , DIMENSION(7) :: opsArgArray

  opsArgArray(1) = opsArg1
  opsArgArray(2) = opsArg2
  opsArgArray(3) = opsArg3
  opsArgArray(4) = opsArg4
  opsArgArray(5) = opsArg5
  opsArgArray(6) = opsArg6
  opsArgArray(7) = opsArg7

  call setKernelTime(18,userSubroutine//char(0),0.0_8,0.0_8,0.0_4,1)
  call ops_timers_core(t1)

#ifdef OPS_MPI
  IF (getRange(block, start, end, range) < 0) THEN
    return
  ENDIF
#else
  DO n = 1, 3
    start(n) = range(2*n-1)
    end(n) = range(2*n)
  END DO
#endif

#ifdef OPS_MPI
  call getIdx(block,start,idx_h)
  idx = idx_h
#else
  idx(1) = start(1)
  idx(2) = start(2)
  idx(3) = start(3)
#endif


  x_size = MAX(0,end(1)-start(1)+1)
  y_size = MAX(0,end(2)-start(2)+1)
  z_size = MAX(0,end(3)-start(3)+1)

  call c_f_pointer(getDatSizeFromOpsArg(opsArg1),dat1_size,(/dim/))
  xdim1 = dat1_size(1)
  ydim1 = dat1_size(2)
  zdim1 = dat1_size(3)
  opsDat1Cardinality = opsArg1%dim * xdim1 * ydim1 * zdim1
  dat1_base = getDatBaseFromOpsArg3D(opsArg1,start,1)
  call c_f_pointer(opsArg1%data_d,opsDat1Local,(/opsDat1Cardinality/))

  call c_f_pointer(getDatSizeFromOpsArg(opsArg2),dat2_size,(/dim/))
  xdim2 = dat2_size(1)
  ydim2 = dat2_size(2)
  zdim2 = dat2_size(3)
  opsDat2Cardinality = opsArg2%dim * xdim2 * ydim2 * zdim2
  dat2_base = getDatBaseFromOpsArg3D(opsArg2,start,1)
  call c_f_pointer(opsArg2%data_d,opsDat2Local,(/opsDat2Cardinality/))

  opsDat3Cardinality = opsArg3%dim
  call c_f_pointer(opsArg3%data,opsDat3Host,(/opsDat3Cardinality/))

  opsDat4Cardinality = opsArg4%dim
  call c_f_pointer(opsArg4%data,opsDat4Host,(/opsDat4Cardinality/))

  opsDat5Cardinality = opsArg5%dim
  call c_f_pointer(opsArg5%data,opsDat5Host,(/opsDat5Cardinality/))

  opsDat6Cardinality = opsArg6%dim
  call c_f_pointer(opsArg6%data,opsDat6Host,(/opsDat6Cardinality/))


  IF ((xdim1 .NE. xdim1_d2fdz2_kernel_main_h) .OR. &
  (ydim1 .NE. ydim1_d2fdz2_kernel_main_h) .OR. &
  (xdim2 .NE. xdim2_d2fdz2_kernel_main_h) .OR. &
  (ydim2 .NE. ydim2_d2fdz2_kernel_main_h) ) THEN
    xdim1_d2fdz2_kernel_main = xdim1
    xdim1_d2fdz2_kernel_main_h = xdim1
    ydim1_d2fdz2_kernel_main = ydim1
    ydim1_d2fdz2_kernel_main_h = ydim1
    xdim2_d2fdz2_kernel_main = xdim2
    xdim2_d2fdz2_kernel_main_h = xdim2
    ydim2_d2fdz2_kernel_main = ydim2
    ydim2_d2fdz2_kernel_main_h = ydim2
  ENDIF

  grid = dim3( (x_size-1)/getOPS_block_size_x()+ 1, (y_size-1)/getOPS_block_size_y() + 1, z_size)
  tblock = dim3(getOPS_block_size_x(),getOPS_block_size_y(),1)


  !halo exchanges
  call ops_H_D_exchanges_device(opsArgArray,7)
  call ops_halo_exchanges(opsArgArray,7,range)
  call ops_H_D_exchanges_device(opsArgArray,7)

  call ops_timers_core(t2)
  call d2fdz2_kernel_main_wrap <<<grid,tblock>>> (&
  & opsDat1Local, &
  & opsDat2Local, &
  & opsDat3Host(1), &
  & opsDat4Host(1), &
  & opsDat5Host(1), &
  & opsDat6Host(1), &
  & idx, &
  & dat1_base, &
  & dat2_base, &
  & x_size, y_size, z_size )

  istat = cudaDeviceSynchronize()
  call ops_timers_core(t3)
  call ops_set_dirtybit_device(opsArgArray, 7)
  call ops_set_halo_dirtybit3(opsArg2,range)

  !Timing and data movement
  transfer_total = 0.0_4
  call ops_compute_transfer(3, start, end, opsArg1,transfer)
  transfer_total = transfer_total + transfer
  call ops_compute_transfer(3, start, end, opsArg2,transfer)
  transfer_total = transfer_total + transfer
  call setKernelTime(18,userSubroutine,t3-t2,t2-t1,transfer_total,0)
end subroutine
END MODULE
